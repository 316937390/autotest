#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import protocol.thrift.advanced_search.enum.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TableType:
  UNKNOWN = 0
  APP = 1
  UNIT = 2
  CAMPAIGN = 3
  FIXED_RANK = 4
  CONFIG = 5
  ADVERTISER = 6
  PUBLISHER = 7
  FIXED_RANKV2 = 8

  _VALUES_TO_NAMES = {
    0: "UNKNOWN",
    1: "APP",
    2: "UNIT",
    3: "CAMPAIGN",
    4: "FIXED_RANK",
    5: "CONFIG",
    6: "ADVERTISER",
    7: "PUBLISHER",
    8: "FIXED_RANKV2",
  }

  _NAMES_TO_VALUES = {
    "UNKNOWN": 0,
    "APP": 1,
    "UNIT": 2,
    "CAMPAIGN": 3,
    "FIXED_RANK": 4,
    "CONFIG": 5,
    "ADVERTISER": 6,
    "PUBLISHER": 7,
    "FIXED_RANKV2": 8,
  }

class NoneResultReason:
  UNKNOWN = 0
  NOOFFER = 1
  STRICTFILTER = 2
  BEYONDOFFSET = 3
  RANKFAIL = 4

  _VALUES_TO_NAMES = {
    0: "UNKNOWN",
    1: "NOOFFER",
    2: "STRICTFILTER",
    3: "BEYONDOFFSET",
    4: "RANKFAIL",
  }

  _NAMES_TO_VALUES = {
    "UNKNOWN": 0,
    "NOOFFER": 1,
    "STRICTFILTER": 2,
    "BEYONDOFFSET": 3,
    "RANKFAIL": 4,
  }

class ErrorCode:
  OK = 0
  QUERY_MONGO_FAILED = 1
  OPEN_API_V3_NO_UNITID = 2
  OPEN_API_V3_GET_TEMPLATE_FAILED = 3
  NO_UNITID_AND_APPID = 4
  AD_SERVER_INTERNAL_ERROR = 5
  UNIT_STATUS_NOT_VALID = 6
  APP_STATUS_NOT_VALID = 7
  PUBLISHER_STATUS_NOT_VALID = 8
  ONLINEAPI_INVALID_ADTYPE = 9
  kECSuccess = 100
  kECRequestNoAppIdAndNoUnitId = 201
  kECRequestOpenAPIV3V4NoUnitId = 202
  kECMemoryPublisherNotExists = 203
  kECRequestUnnormal = 204
  kECMemoryAppIdNotExists = 301
  kECMemoryUnitIdNotExists = 302
  kECMemoryPublisherIdNotExists = 304
  kECMemoryPublisherStatusNotActive = 305
  kECMemoryPublisherTypeNotAllow = 306
  kECMemoryAppStatusNotActive = 307
  kECMemoryUnitStatusNotActive = 308
  kECMemoryNoAdSourceList = 309
  kECMemoryAdSourceListEmpty = 310
  kECMemoryConfigGetImageSizeIdFailed = 311
  kECMemoryLackOfConfig = 312
  kECRankerSelectRankerFailed = 401
  kECRankerRankFailed = 402
  kECRankerSelectNativeTemplateFailed = 403
  kECRankerAllVba = 404
  kECBasicSearchQueryFailed = 501
  kECBasicSearchRecallNotEnough = 502
  kECBasicSearchAllVba = 503
  kECSetPsInputFailed = 504
  kECQueryPsFailed = 505
  kECParsePsOutputFailed = 506
  kECPsInternalError = 507

  _VALUES_TO_NAMES = {
    0: "OK",
    1: "QUERY_MONGO_FAILED",
    2: "OPEN_API_V3_NO_UNITID",
    3: "OPEN_API_V3_GET_TEMPLATE_FAILED",
    4: "NO_UNITID_AND_APPID",
    5: "AD_SERVER_INTERNAL_ERROR",
    6: "UNIT_STATUS_NOT_VALID",
    7: "APP_STATUS_NOT_VALID",
    8: "PUBLISHER_STATUS_NOT_VALID",
    9: "ONLINEAPI_INVALID_ADTYPE",
    100: "kECSuccess",
    201: "kECRequestNoAppIdAndNoUnitId",
    202: "kECRequestOpenAPIV3V4NoUnitId",
    203: "kECMemoryPublisherNotExists",
    204: "kECRequestUnnormal",
    301: "kECMemoryAppIdNotExists",
    302: "kECMemoryUnitIdNotExists",
    304: "kECMemoryPublisherIdNotExists",
    305: "kECMemoryPublisherStatusNotActive",
    306: "kECMemoryPublisherTypeNotAllow",
    307: "kECMemoryAppStatusNotActive",
    308: "kECMemoryUnitStatusNotActive",
    309: "kECMemoryNoAdSourceList",
    310: "kECMemoryAdSourceListEmpty",
    311: "kECMemoryConfigGetImageSizeIdFailed",
    312: "kECMemoryLackOfConfig",
    401: "kECRankerSelectRankerFailed",
    402: "kECRankerRankFailed",
    403: "kECRankerSelectNativeTemplateFailed",
    404: "kECRankerAllVba",
    501: "kECBasicSearchQueryFailed",
    502: "kECBasicSearchRecallNotEnough",
    503: "kECBasicSearchAllVba",
    504: "kECSetPsInputFailed",
    505: "kECQueryPsFailed",
    506: "kECParsePsOutputFailed",
    507: "kECPsInternalError",
  }

  _NAMES_TO_VALUES = {
    "OK": 0,
    "QUERY_MONGO_FAILED": 1,
    "OPEN_API_V3_NO_UNITID": 2,
    "OPEN_API_V3_GET_TEMPLATE_FAILED": 3,
    "NO_UNITID_AND_APPID": 4,
    "AD_SERVER_INTERNAL_ERROR": 5,
    "UNIT_STATUS_NOT_VALID": 6,
    "APP_STATUS_NOT_VALID": 7,
    "PUBLISHER_STATUS_NOT_VALID": 8,
    "ONLINEAPI_INVALID_ADTYPE": 9,
    "kECSuccess": 100,
    "kECRequestNoAppIdAndNoUnitId": 201,
    "kECRequestOpenAPIV3V4NoUnitId": 202,
    "kECMemoryPublisherNotExists": 203,
    "kECRequestUnnormal": 204,
    "kECMemoryAppIdNotExists": 301,
    "kECMemoryUnitIdNotExists": 302,
    "kECMemoryPublisherIdNotExists": 304,
    "kECMemoryPublisherStatusNotActive": 305,
    "kECMemoryPublisherTypeNotAllow": 306,
    "kECMemoryAppStatusNotActive": 307,
    "kECMemoryUnitStatusNotActive": 308,
    "kECMemoryNoAdSourceList": 309,
    "kECMemoryAdSourceListEmpty": 310,
    "kECMemoryConfigGetImageSizeIdFailed": 311,
    "kECMemoryLackOfConfig": 312,
    "kECRankerSelectRankerFailed": 401,
    "kECRankerRankFailed": 402,
    "kECRankerSelectNativeTemplateFailed": 403,
    "kECRankerAllVba": 404,
    "kECBasicSearchQueryFailed": 501,
    "kECBasicSearchRecallNotEnough": 502,
    "kECBasicSearchAllVba": 503,
    "kECSetPsInputFailed": 504,
    "kECQueryPsFailed": 505,
    "kECParsePsOutputFailed": 506,
    "kECPsInternalError": 507,
  }


class FilterReason:
  """
  Attributes:
   - campaignId
   - reason
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'campaignId', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
  )

  def __init__(self, campaignId=None, reason=None,):
    self.campaignId = campaignId
    self.reason = reason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.campaignId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FilterReason')
    if self.campaignId is not None:
      oprot.writeFieldBegin('campaignId', TType.I64, 1)
      oprot.writeI64(self.campaignId)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.campaignId is None:
      raise TProtocol.TProtocolException(message='Required field campaignId is unset!')
    if self.reason is None:
      raise TProtocol.TProtocolException(message='Required field reason is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.campaignId)
    value = (value * 31) ^ hash(self.reason)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DictMeta:
  """
  Attributes:
   - dict_name
   - dict_path
   - cache_size
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dict_name', None, None, ), # 1
    (2, TType.STRING, 'dict_path', None, None, ), # 2
    (3, TType.I32, 'cache_size', None, None, ), # 3
  )

  def __init__(self, dict_name=None, dict_path=None, cache_size=None,):
    self.dict_name = dict_name
    self.dict_path = dict_path
    self.cache_size = cache_size

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dict_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.dict_path = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cache_size = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DictMeta')
    if self.dict_name is not None:
      oprot.writeFieldBegin('dict_name', TType.STRING, 1)
      oprot.writeString(self.dict_name)
      oprot.writeFieldEnd()
    if self.dict_path is not None:
      oprot.writeFieldBegin('dict_path', TType.STRING, 2)
      oprot.writeString(self.dict_path)
      oprot.writeFieldEnd()
    if self.cache_size is not None:
      oprot.writeFieldBegin('cache_size', TType.I32, 3)
      oprot.writeI32(self.cache_size)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dict_name is None:
      raise TProtocol.TProtocolException(message='Required field dict_name is unset!')
    if self.dict_path is None:
      raise TProtocol.TProtocolException(message='Required field dict_path is unset!')
    if self.cache_size is None:
      raise TProtocol.TProtocolException(message='Required field cache_size is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dict_name)
    value = (value * 31) ^ hash(self.dict_path)
    value = (value * 31) ^ hash(self.cache_size)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SmartPV:
  """
  Attributes:
   - packageName
   - version
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'packageName', None, None, ), # 1
    (2, TType.STRING, 'version', None, None, ), # 2
  )

  def __init__(self, packageName=None, version=None,):
    self.packageName = packageName
    self.version = version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.packageName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.version = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SmartPV')
    if self.packageName is not None:
      oprot.writeFieldBegin('packageName', TType.STRING, 1)
      oprot.writeString(self.packageName)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 2)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.packageName is None:
      raise TProtocol.TProtocolException(message='Required field packageName is unset!')
    if self.version is None:
      raise TProtocol.TProtocolException(message='Required field version is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.packageName)
    value = (value * 31) ^ hash(self.version)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RunTimeVariable:
  """
  Attributes:
   - numRecalled
   - getCampaignPositionInfoTime
   - getCampaignInfoTime
   - rankTime
   - getCampaignIdTime
   - getCampaignDetailTime
   - publisherId
   - recallSize
   - recallSizeAll
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'numRecalled', None, None, ), # 1
    (2, TType.I32, 'getCampaignPositionInfoTime', None, None, ), # 2
    (3, TType.I32, 'getCampaignInfoTime', None, None, ), # 3
    (4, TType.I32, 'rankTime', None, None, ), # 4
    (5, TType.I32, 'getCampaignIdTime', None, None, ), # 5
    (6, TType.I32, 'getCampaignDetailTime', None, None, ), # 6
    (7, TType.I32, 'publisherId', None, None, ), # 7
    (8, TType.I32, 'recallSize', None, None, ), # 8
    (9, TType.I32, 'recallSizeAll', None, None, ), # 9
  )

  def __init__(self, numRecalled=None, getCampaignPositionInfoTime=None, getCampaignInfoTime=None, rankTime=None, getCampaignIdTime=None, getCampaignDetailTime=None, publisherId=None, recallSize=None, recallSizeAll=None,):
    self.numRecalled = numRecalled
    self.getCampaignPositionInfoTime = getCampaignPositionInfoTime
    self.getCampaignInfoTime = getCampaignInfoTime
    self.rankTime = rankTime
    self.getCampaignIdTime = getCampaignIdTime
    self.getCampaignDetailTime = getCampaignDetailTime
    self.publisherId = publisherId
    self.recallSize = recallSize
    self.recallSizeAll = recallSizeAll

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.numRecalled = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.getCampaignPositionInfoTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.getCampaignInfoTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.rankTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.getCampaignIdTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.getCampaignDetailTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.publisherId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.recallSize = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.recallSizeAll = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RunTimeVariable')
    if self.numRecalled is not None:
      oprot.writeFieldBegin('numRecalled', TType.I32, 1)
      oprot.writeI32(self.numRecalled)
      oprot.writeFieldEnd()
    if self.getCampaignPositionInfoTime is not None:
      oprot.writeFieldBegin('getCampaignPositionInfoTime', TType.I32, 2)
      oprot.writeI32(self.getCampaignPositionInfoTime)
      oprot.writeFieldEnd()
    if self.getCampaignInfoTime is not None:
      oprot.writeFieldBegin('getCampaignInfoTime', TType.I32, 3)
      oprot.writeI32(self.getCampaignInfoTime)
      oprot.writeFieldEnd()
    if self.rankTime is not None:
      oprot.writeFieldBegin('rankTime', TType.I32, 4)
      oprot.writeI32(self.rankTime)
      oprot.writeFieldEnd()
    if self.getCampaignIdTime is not None:
      oprot.writeFieldBegin('getCampaignIdTime', TType.I32, 5)
      oprot.writeI32(self.getCampaignIdTime)
      oprot.writeFieldEnd()
    if self.getCampaignDetailTime is not None:
      oprot.writeFieldBegin('getCampaignDetailTime', TType.I32, 6)
      oprot.writeI32(self.getCampaignDetailTime)
      oprot.writeFieldEnd()
    if self.publisherId is not None:
      oprot.writeFieldBegin('publisherId', TType.I32, 7)
      oprot.writeI32(self.publisherId)
      oprot.writeFieldEnd()
    if self.recallSize is not None:
      oprot.writeFieldBegin('recallSize', TType.I32, 8)
      oprot.writeI32(self.recallSize)
      oprot.writeFieldEnd()
    if self.recallSizeAll is not None:
      oprot.writeFieldBegin('recallSizeAll', TType.I32, 9)
      oprot.writeI32(self.recallSizeAll)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.numRecalled)
    value = (value * 31) ^ hash(self.getCampaignPositionInfoTime)
    value = (value * 31) ^ hash(self.getCampaignInfoTime)
    value = (value * 31) ^ hash(self.rankTime)
    value = (value * 31) ^ hash(self.getCampaignIdTime)
    value = (value * 31) ^ hash(self.getCampaignDetailTime)
    value = (value * 31) ^ hash(self.publisherId)
    value = (value * 31) ^ hash(self.recallSize)
    value = (value * 31) ^ hash(self.recallSizeAll)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NativeInfo:
  """
  Attributes:
   - adTemplate
   - requireNum
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'adTemplate', None, None, ), # 1
    (2, TType.I64, 'requireNum', None, None, ), # 2
  )

  def __init__(self, adTemplate=None, requireNum=None,):
    self.adTemplate = adTemplate
    self.requireNum = requireNum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.adTemplate = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.requireNum = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NativeInfo')
    if self.adTemplate is not None:
      oprot.writeFieldBegin('adTemplate', TType.I32, 1)
      oprot.writeI32(self.adTemplate)
      oprot.writeFieldEnd()
    if self.requireNum is not None:
      oprot.writeFieldBegin('requireNum', TType.I64, 2)
      oprot.writeI64(self.requireNum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.adTemplate is None:
      raise TProtocol.TProtocolException(message='Required field adTemplate is unset!')
    if self.requireNum is None:
      raise TProtocol.TProtocolException(message='Required field requireNum is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.adTemplate)
    value = (value * 31) ^ hash(self.requireNum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestBanner:
  """
  Attributes:
   - size
   - format_sizes
   - mimes
   - b_attr
   - b_type
   - api
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'size', None, None, ), # 1
    (2, TType.LIST, 'format_sizes', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'mimes', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'b_attr', (TType.I32,None), None, ), # 4
    (5, TType.LIST, 'b_type', (TType.I32,None), None, ), # 5
    (6, TType.LIST, 'api', (TType.I32,None), None, ), # 6
  )

  def __init__(self, size=None, format_sizes=None, mimes=None, b_attr=None, b_type=None, api=None,):
    self.size = size
    self.format_sizes = format_sizes
    self.mimes = mimes
    self.b_attr = b_attr
    self.b_type = b_type
    self.api = api

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.size = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.format_sizes = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in range(_size0):
            _elem5 = iprot.readString()
            self.format_sizes.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.mimes = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in range(_size6):
            _elem11 = iprot.readString()
            self.mimes.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.b_attr = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in range(_size12):
            _elem17 = iprot.readI32()
            self.b_attr.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.b_type = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in range(_size18):
            _elem23 = iprot.readI32()
            self.b_type.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.api = []
          (_etype27, _size24) = iprot.readListBegin()
          for _i28 in range(_size24):
            _elem29 = iprot.readI32()
            self.api.append(_elem29)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestBanner')
    if self.size is not None:
      oprot.writeFieldBegin('size', TType.STRING, 1)
      oprot.writeString(self.size)
      oprot.writeFieldEnd()
    if self.format_sizes is not None:
      oprot.writeFieldBegin('format_sizes', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.format_sizes))
      for iter30 in self.format_sizes:
        oprot.writeString(iter30)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mimes is not None:
      oprot.writeFieldBegin('mimes', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.mimes))
      for iter31 in self.mimes:
        oprot.writeString(iter31)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.b_attr is not None:
      oprot.writeFieldBegin('b_attr', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.b_attr))
      for iter32 in self.b_attr:
        oprot.writeI32(iter32)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.b_type is not None:
      oprot.writeFieldBegin('b_type', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.b_type))
      for iter33 in self.b_type:
        oprot.writeI32(iter33)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.api is not None:
      oprot.writeFieldBegin('api', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.api))
      for iter34 in self.api:
        oprot.writeI32(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.size)
    value = (value * 31) ^ hash(self.format_sizes)
    value = (value * 31) ^ hash(self.mimes)
    value = (value * 31) ^ hash(self.b_attr)
    value = (value * 31) ^ hash(self.b_type)
    value = (value * 31) ^ hash(self.api)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RTBParams:
  """
  Attributes:
   - exchange
   - requestBanner
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'exchange', None, None, ), # 1
    (2, TType.STRUCT, 'requestBanner', (RequestBanner, RequestBanner.thrift_spec), None, ), # 2
  )

  def __init__(self, exchange=None, requestBanner=None,):
    self.exchange = exchange
    self.requestBanner = requestBanner

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.exchange = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.requestBanner = RequestBanner()
          self.requestBanner.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RTBParams')
    if self.exchange is not None:
      oprot.writeFieldBegin('exchange', TType.STRING, 1)
      oprot.writeString(self.exchange)
      oprot.writeFieldEnd()
    if self.requestBanner is not None:
      oprot.writeFieldBegin('requestBanner', TType.STRUCT, 2)
      self.requestBanner.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.exchange)
    value = (value * 31) ^ hash(self.requestBanner)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryParam:
  """
  Attributes:
   - timestamp
   - appId
   - unitId
   - scenario
   - adTypeStr
   - excludeIdSet
   - adNum
   - imageSizeId
   - requestType
   - category
   - platform
   - osVersion
   - sdkVersion
   - packageName
   - appVersionName
   - appVersionCode
   - imei
   - mac
   - devId
   - deviceModel
   - screenSize
   - orientation
   - mnc
   - mcc
   - networkType
   - language
   - ip
   - adnServerIp
   - countryCode
   - DEPRECATED_publisherId
   - DEPRECATED_campaignType
   - DEPRECATED_excludePackageNameSet
   - sessionId
   - parentSessionId
   - timezone
   - GP_version
   - adSourceList
   - campaignKind
   - googleAdvertisingId
   - osVersionCode
   - DEPRECATED_publisherType
   - DEPRECATED_excludeAdvertiserIdSet
   - DEPRECATED_whiteCampaignIdSet
   - networkId
   - requestId
   - unitSize
   - offset
   - rankerName
   - nativeInfoList
   - showedCampaignIdList
   - frameNum
   - idfa
   - recallADNOffer
   - advertiserId
   - trueNum
   - preclickCampaignIds
   - installIdSet
   - includePackageNameSet
   - deviceBrand
   - cityCode
   - smartPVList
   - priceFloor
   - powerPackList
   - realAppId
   - unSupportSdkTruenum
   - ua
   - idCheck
   - osVersionCodeV2
   - ifSupportSeperateCreative
   - videoVersion
   - cleverPackList
   - prePid
   - videow
   - videoh
   - rankerInfo
   - debugMode
   - apiVersion
   - resourceType
   - lowDevice
   - unifiedDevBrand
   - unifiedDevModel
   - bidFloor
   - targetPackageNameSet
   - parentUnitId
   - mofData
   - systemId
   - sysbkupId
   - pubFlowExpectPrice
   - fillEcpmFloor
   - imeiMd5
   - devIdMd5
   - gaidMd5
   - idfaMd5
   - ifSupportBigTemplate
   - placementId
   - passthroughData
   - ifSupportDco
   - audienceIds
   - ifSupportRewardPlus
   - webEnv
   - ifSupportPolaris
   - rtbParams
   - testMode
   - randNum
   - tcType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'timestamp', None, None, ), # 1
    (2, TType.I64, 'appId', None, None, ), # 2
    (3, TType.I64, 'unitId', None, None, ), # 3
    (4, TType.STRING, 'scenario', None, None, ), # 4
    (5, TType.STRING, 'adTypeStr', None, None, ), # 5
    (6, TType.SET, 'excludeIdSet', (TType.I64,None), None, ), # 6
    (7, TType.I32, 'adNum', None, None, ), # 7
    (8, TType.I32, 'imageSizeId', None,     0, ), # 8
    (9, TType.I32, 'requestType', None,     0, ), # 9
    (10, TType.I32, 'category', None,     0, ), # 10
    (11, TType.I32, 'platform', None,     0, ), # 11
    (12, TType.STRING, 'osVersion', None, None, ), # 12
    (13, TType.STRING, 'sdkVersion', None, None, ), # 13
    (14, TType.STRING, 'packageName', None, None, ), # 14
    (15, TType.STRING, 'appVersionName', None, None, ), # 15
    (16, TType.STRING, 'appVersionCode', None, None, ), # 16
    (17, TType.STRING, 'imei', None, None, ), # 17
    (18, TType.STRING, 'mac', None, None, ), # 18
    (19, TType.STRING, 'devId', None, None, ), # 19
    (20, TType.STRING, 'deviceModel', None, None, ), # 20
    (21, TType.STRING, 'screenSize', None, None, ), # 21
    (22, TType.I32, 'orientation', None,     0, ), # 22
    (23, TType.STRING, 'mnc', None, None, ), # 23
    (24, TType.STRING, 'mcc', None, None, ), # 24
    (25, TType.I32, 'networkType', None,     0, ), # 25
    (26, TType.STRING, 'language', None, None, ), # 26
    (27, TType.STRING, 'ip', None, None, ), # 27
    (28, TType.STRING, 'adnServerIp', None, None, ), # 28
    (29, TType.STRING, 'countryCode', None, None, ), # 29
    (30, TType.I64, 'DEPRECATED_publisherId', None, None, ), # 30
    (31, TType.I32, 'DEPRECATED_campaignType', None,     0, ), # 31
    (32, TType.SET, 'DEPRECATED_excludePackageNameSet', (TType.STRING,None), None, ), # 32
    (33, TType.STRING, 'sessionId', None, None, ), # 33
    (34, TType.STRING, 'parentSessionId', None, None, ), # 34
    (35, TType.STRING, 'timezone', None, None, ), # 35
    (36, TType.STRING, 'GP_version', None, None, ), # 36
    (37, TType.LIST, 'adSourceList', (TType.I32,None), None, ), # 37
    (38, TType.STRING, 'campaignKind', None, None, ), # 38
    (39, TType.STRING, 'googleAdvertisingId', None, None, ), # 39
    (40, TType.I32, 'osVersionCode', None, None, ), # 40
    (41, TType.I32, 'DEPRECATED_publisherType', None,     0, ), # 41
    (42, TType.SET, 'DEPRECATED_excludeAdvertiserIdSet', (TType.I64,None), None, ), # 42
    (43, TType.SET, 'DEPRECATED_whiteCampaignIdSet', (TType.I64,None), None, ), # 43
    (44, TType.I64, 'networkId', None, None, ), # 44
    (45, TType.STRING, 'requestId', None, None, ), # 45
    (46, TType.STRING, 'unitSize', None, None, ), # 46
    (47, TType.I32, 'offset', None, 0, ), # 47
    (48, TType.STRING, 'rankerName', None, None, ), # 48
    (49, TType.LIST, 'nativeInfoList', (TType.STRUCT,(NativeInfo, NativeInfo.thrift_spec)), None, ), # 49
    (50, TType.LIST, 'showedCampaignIdList', (TType.I64,None), None, ), # 50
    (51, TType.I64, 'frameNum', None, None, ), # 51
    (52, TType.STRING, 'idfa', None, None, ), # 52
    (53, TType.I32, 'recallADNOffer', None, None, ), # 53
    (54, TType.I64, 'advertiserId', None, None, ), # 54
    (55, TType.I64, 'trueNum', None, None, ), # 55
    (56, TType.LIST, 'preclickCampaignIds', (TType.I64,None), None, ), # 56
    (57, TType.SET, 'installIdSet', (TType.I64,None), None, ), # 57
    (58, TType.SET, 'includePackageNameSet', (TType.STRING,None), None, ), # 58
    (59, TType.STRING, 'deviceBrand', None, None, ), # 59
    (60, TType.I64, 'cityCode', None, None, ), # 60
    (61, TType.LIST, 'smartPVList', (TType.STRUCT,(SmartPV, SmartPV.thrift_spec)), None, ), # 61
    (62, TType.DOUBLE, 'priceFloor', None, None, ), # 62
    (63, TType.LIST, 'powerPackList', (TType.STRUCT,(SmartPV, SmartPV.thrift_spec)), None, ), # 63
    (64, TType.I64, 'realAppId', None, None, ), # 64
    (65, TType.I32, 'unSupportSdkTruenum', None, None, ), # 65
    (66, TType.STRING, 'ua', None, None, ), # 66
    (67, TType.SET, 'idCheck', (TType.I64,None), None, ), # 67
    (68, TType.I32, 'osVersionCodeV2', None, None, ), # 68
    (69, TType.I32, 'ifSupportSeperateCreative', None, None, ), # 69
    (70, TType.STRING, 'videoVersion', None, None, ), # 70
    (71, TType.LIST, 'cleverPackList', (TType.STRUCT,(SmartPV, SmartPV.thrift_spec)), None, ), # 71
    (72, TType.LIST, 'prePid', (TType.I64,None), None, ), # 72
    (73, TType.I32, 'videow', None, None, ), # 73
    (74, TType.I32, 'videoh', None, None, ), # 74
    (75, TType.STRING, 'rankerInfo', None, None, ), # 75
    (76, TType.BOOL, 'debugMode', None, False, ), # 76
    (77, TType.I32, 'apiVersion', None, None, ), # 77
    (78, TType.I32, 'resourceType', None, None, ), # 78
    (79, TType.BOOL, 'lowDevice', None, False, ), # 79
    (80, TType.STRING, 'unifiedDevBrand', None, None, ), # 80
    (81, TType.STRING, 'unifiedDevModel', None, None, ), # 81
    (82, TType.DOUBLE, 'bidFloor', None, None, ), # 82
    (83, TType.SET, 'targetPackageNameSet', (TType.STRING,None), None, ), # 83
    (84, TType.I64, 'parentUnitId', None, None, ), # 84
    (85, TType.STRING, 'mofData', None, None, ), # 85
    (86, TType.STRING, 'systemId', None, None, ), # 86
    (87, TType.STRING, 'sysbkupId', None, None, ), # 87
    (88, TType.DOUBLE, 'pubFlowExpectPrice', None, None, ), # 88
    (89, TType.DOUBLE, 'fillEcpmFloor', None, None, ), # 89
    (90, TType.STRING, 'imeiMd5', None, None, ), # 90
    (91, TType.STRING, 'devIdMd5', None, None, ), # 91
    (92, TType.STRING, 'gaidMd5', None, None, ), # 92
    (93, TType.STRING, 'idfaMd5', None, None, ), # 93
    (94, TType.I32, 'ifSupportBigTemplate', None, None, ), # 94
    (95, TType.I64, 'placementId', None, None, ), # 95
    (96, TType.MAP, 'passthroughData', (TType.STRING,None,TType.STRING,None), None, ), # 96
    (97, TType.I32, 'ifSupportDco', None, None, ), # 97
    (98, TType.LIST, 'audienceIds', (TType.I64,None), None, ), # 98
    (99, TType.I32, 'ifSupportRewardPlus', None, None, ), # 99
    (100, TType.MAP, 'webEnv', (TType.STRING,None,TType.STRING,None), None, ), # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    None, # 131
    None, # 132
    None, # 133
    None, # 134
    None, # 135
    None, # 136
    None, # 137
    None, # 138
    None, # 139
    None, # 140
    None, # 141
    None, # 142
    None, # 143
    None, # 144
    None, # 145
    None, # 146
    None, # 147
    None, # 148
    None, # 149
    None, # 150
    None, # 151
    None, # 152
    None, # 153
    None, # 154
    None, # 155
    None, # 156
    None, # 157
    None, # 158
    None, # 159
    None, # 160
    None, # 161
    None, # 162
    None, # 163
    None, # 164
    None, # 165
    None, # 166
    None, # 167
    None, # 168
    None, # 169
    None, # 170
    None, # 171
    None, # 172
    None, # 173
    None, # 174
    None, # 175
    None, # 176
    None, # 177
    None, # 178
    None, # 179
    None, # 180
    None, # 181
    None, # 182
    None, # 183
    None, # 184
    None, # 185
    None, # 186
    None, # 187
    None, # 188
    None, # 189
    None, # 190
    None, # 191
    None, # 192
    None, # 193
    None, # 194
    None, # 195
    None, # 196
    None, # 197
    None, # 198
    None, # 199
    (200, TType.I32, 'ifSupportPolaris', None, None, ), # 200
    (201, TType.STRUCT, 'rtbParams', (RTBParams, RTBParams.thrift_spec), None, ), # 201
    None, # 202
    None, # 203
    None, # 204
    None, # 205
    None, # 206
    None, # 207
    None, # 208
    None, # 209
    None, # 210
    None, # 211
    None, # 212
    None, # 213
    None, # 214
    None, # 215
    None, # 216
    None, # 217
    None, # 218
    None, # 219
    None, # 220
    None, # 221
    None, # 222
    None, # 223
    None, # 224
    None, # 225
    None, # 226
    None, # 227
    None, # 228
    None, # 229
    None, # 230
    None, # 231
    None, # 232
    None, # 233
    None, # 234
    None, # 235
    None, # 236
    None, # 237
    None, # 238
    None, # 239
    None, # 240
    None, # 241
    None, # 242
    None, # 243
    None, # 244
    None, # 245
    None, # 246
    None, # 247
    None, # 248
    None, # 249
    None, # 250
    None, # 251
    None, # 252
    None, # 253
    None, # 254
    None, # 255
    None, # 256
    None, # 257
    None, # 258
    None, # 259
    None, # 260
    None, # 261
    None, # 262
    None, # 263
    None, # 264
    None, # 265
    None, # 266
    None, # 267
    None, # 268
    None, # 269
    None, # 270
    None, # 271
    None, # 272
    None, # 273
    None, # 274
    None, # 275
    None, # 276
    None, # 277
    None, # 278
    None, # 279
    None, # 280
    None, # 281
    None, # 282
    None, # 283
    None, # 284
    None, # 285
    None, # 286
    None, # 287
    None, # 288
    None, # 289
    None, # 290
    None, # 291
    None, # 292
    None, # 293
    None, # 294
    None, # 295
    None, # 296
    None, # 297
    None, # 298
    None, # 299
    None, # 300
    None, # 301
    None, # 302
    None, # 303
    None, # 304
    None, # 305
    None, # 306
    None, # 307
    None, # 308
    None, # 309
    None, # 310
    None, # 311
    None, # 312
    None, # 313
    None, # 314
    None, # 315
    None, # 316
    None, # 317
    None, # 318
    None, # 319
    None, # 320
    None, # 321
    None, # 322
    None, # 323
    None, # 324
    None, # 325
    None, # 326
    None, # 327
    None, # 328
    None, # 329
    None, # 330
    None, # 331
    None, # 332
    None, # 333
    None, # 334
    None, # 335
    None, # 336
    None, # 337
    None, # 338
    None, # 339
    None, # 340
    None, # 341
    None, # 342
    None, # 343
    None, # 344
    None, # 345
    None, # 346
    None, # 347
    None, # 348
    None, # 349
    None, # 350
    None, # 351
    None, # 352
    None, # 353
    None, # 354
    None, # 355
    None, # 356
    None, # 357
    None, # 358
    None, # 359
    None, # 360
    None, # 361
    None, # 362
    None, # 363
    None, # 364
    None, # 365
    None, # 366
    None, # 367
    None, # 368
    None, # 369
    None, # 370
    None, # 371
    None, # 372
    None, # 373
    None, # 374
    None, # 375
    None, # 376
    None, # 377
    None, # 378
    None, # 379
    None, # 380
    None, # 381
    None, # 382
    None, # 383
    None, # 384
    None, # 385
    None, # 386
    None, # 387
    None, # 388
    None, # 389
    None, # 390
    None, # 391
    None, # 392
    None, # 393
    None, # 394
    None, # 395
    None, # 396
    None, # 397
    None, # 398
    None, # 399
    None, # 400
    None, # 401
    None, # 402
    None, # 403
    None, # 404
    None, # 405
    None, # 406
    None, # 407
    None, # 408
    None, # 409
    None, # 410
    None, # 411
    None, # 412
    None, # 413
    None, # 414
    None, # 415
    None, # 416
    None, # 417
    None, # 418
    None, # 419
    None, # 420
    None, # 421
    None, # 422
    None, # 423
    None, # 424
    None, # 425
    None, # 426
    None, # 427
    None, # 428
    None, # 429
    None, # 430
    None, # 431
    None, # 432
    None, # 433
    None, # 434
    None, # 435
    None, # 436
    None, # 437
    None, # 438
    None, # 439
    None, # 440
    None, # 441
    None, # 442
    None, # 443
    None, # 444
    None, # 445
    None, # 446
    None, # 447
    None, # 448
    None, # 449
    None, # 450
    None, # 451
    None, # 452
    None, # 453
    None, # 454
    None, # 455
    None, # 456
    None, # 457
    None, # 458
    None, # 459
    None, # 460
    None, # 461
    None, # 462
    None, # 463
    None, # 464
    None, # 465
    None, # 466
    None, # 467
    None, # 468
    None, # 469
    None, # 470
    None, # 471
    None, # 472
    None, # 473
    None, # 474
    None, # 475
    None, # 476
    None, # 477
    None, # 478
    None, # 479
    None, # 480
    None, # 481
    None, # 482
    None, # 483
    None, # 484
    None, # 485
    None, # 486
    None, # 487
    None, # 488
    None, # 489
    None, # 490
    None, # 491
    None, # 492
    None, # 493
    None, # 494
    None, # 495
    None, # 496
    None, # 497
    None, # 498
    None, # 499
    None, # 500
    None, # 501
    None, # 502
    None, # 503
    None, # 504
    None, # 505
    None, # 506
    None, # 507
    None, # 508
    None, # 509
    None, # 510
    None, # 511
    None, # 512
    None, # 513
    None, # 514
    None, # 515
    None, # 516
    None, # 517
    None, # 518
    None, # 519
    None, # 520
    None, # 521
    None, # 522
    None, # 523
    None, # 524
    None, # 525
    None, # 526
    None, # 527
    None, # 528
    None, # 529
    None, # 530
    None, # 531
    None, # 532
    None, # 533
    None, # 534
    None, # 535
    None, # 536
    None, # 537
    None, # 538
    None, # 539
    None, # 540
    None, # 541
    None, # 542
    None, # 543
    None, # 544
    None, # 545
    None, # 546
    None, # 547
    None, # 548
    None, # 549
    None, # 550
    None, # 551
    None, # 552
    None, # 553
    None, # 554
    None, # 555
    None, # 556
    None, # 557
    None, # 558
    None, # 559
    None, # 560
    None, # 561
    None, # 562
    None, # 563
    None, # 564
    None, # 565
    None, # 566
    None, # 567
    None, # 568
    None, # 569
    None, # 570
    None, # 571
    None, # 572
    None, # 573
    None, # 574
    None, # 575
    None, # 576
    None, # 577
    None, # 578
    None, # 579
    None, # 580
    None, # 581
    None, # 582
    None, # 583
    None, # 584
    None, # 585
    None, # 586
    None, # 587
    None, # 588
    None, # 589
    None, # 590
    None, # 591
    None, # 592
    None, # 593
    None, # 594
    None, # 595
    None, # 596
    None, # 597
    None, # 598
    None, # 599
    None, # 600
    None, # 601
    None, # 602
    None, # 603
    None, # 604
    None, # 605
    None, # 606
    None, # 607
    None, # 608
    None, # 609
    None, # 610
    None, # 611
    None, # 612
    None, # 613
    None, # 614
    None, # 615
    None, # 616
    None, # 617
    None, # 618
    None, # 619
    None, # 620
    None, # 621
    None, # 622
    None, # 623
    None, # 624
    None, # 625
    None, # 626
    None, # 627
    None, # 628
    None, # 629
    None, # 630
    None, # 631
    None, # 632
    None, # 633
    None, # 634
    None, # 635
    None, # 636
    None, # 637
    None, # 638
    None, # 639
    None, # 640
    None, # 641
    None, # 642
    None, # 643
    None, # 644
    None, # 645
    None, # 646
    None, # 647
    None, # 648
    None, # 649
    None, # 650
    None, # 651
    None, # 652
    None, # 653
    None, # 654
    None, # 655
    None, # 656
    None, # 657
    None, # 658
    None, # 659
    None, # 660
    None, # 661
    None, # 662
    None, # 663
    None, # 664
    None, # 665
    (666, TType.I32, 'testMode', None, 0, ), # 666
    (667, TType.I32, 'randNum', None, 0, ), # 667
    None, # 668
    None, # 669
    None, # 670
    None, # 671
    None, # 672
    None, # 673
    None, # 674
    None, # 675
    None, # 676
    None, # 677
    None, # 678
    None, # 679
    None, # 680
    None, # 681
    None, # 682
    None, # 683
    None, # 684
    None, # 685
    None, # 686
    None, # 687
    None, # 688
    None, # 689
    None, # 690
    None, # 691
    None, # 692
    None, # 693
    None, # 694
    None, # 695
    None, # 696
    None, # 697
    None, # 698
    None, # 699
    None, # 700
    None, # 701
    None, # 702
    None, # 703
    None, # 704
    None, # 705
    None, # 706
    None, # 707
    None, # 708
    None, # 709
    None, # 710
    None, # 711
    None, # 712
    None, # 713
    None, # 714
    None, # 715
    None, # 716
    None, # 717
    None, # 718
    None, # 719
    None, # 720
    None, # 721
    None, # 722
    None, # 723
    None, # 724
    None, # 725
    None, # 726
    None, # 727
    None, # 728
    None, # 729
    None, # 730
    None, # 731
    None, # 732
    None, # 733
    None, # 734
    None, # 735
    None, # 736
    None, # 737
    None, # 738
    None, # 739
    None, # 740
    None, # 741
    None, # 742
    None, # 743
    None, # 744
    None, # 745
    None, # 746
    None, # 747
    None, # 748
    None, # 749
    None, # 750
    None, # 751
    None, # 752
    None, # 753
    None, # 754
    None, # 755
    None, # 756
    None, # 757
    None, # 758
    None, # 759
    None, # 760
    None, # 761
    None, # 762
    None, # 763
    None, # 764
    None, # 765
    None, # 766
    None, # 767
    None, # 768
    None, # 769
    None, # 770
    None, # 771
    None, # 772
    None, # 773
    None, # 774
    None, # 775
    None, # 776
    None, # 777
    None, # 778
    None, # 779
    None, # 780
    None, # 781
    None, # 782
    None, # 783
    None, # 784
    None, # 785
    None, # 786
    None, # 787
    None, # 788
    None, # 789
    None, # 790
    None, # 791
    None, # 792
    None, # 793
    None, # 794
    None, # 795
    None, # 796
    None, # 797
    None, # 798
    None, # 799
    (800, TType.I32, 'tcType', None, None, ), # 800
  )

  def __init__(self, timestamp=None, appId=None, unitId=None, scenario=None, adTypeStr=None, excludeIdSet=None, adNum=None, imageSizeId=thrift_spec[8][4], requestType=thrift_spec[9][4], category=thrift_spec[10][4], platform=thrift_spec[11][4], osVersion=None, sdkVersion=None, packageName=None, appVersionName=None, appVersionCode=None, imei=None, mac=None, devId=None, deviceModel=None, screenSize=None, orientation=thrift_spec[22][4], mnc=None, mcc=None, networkType=thrift_spec[25][4], language=None, ip=None, adnServerIp=None, countryCode=None, DEPRECATED_publisherId=None, DEPRECATED_campaignType=thrift_spec[31][4], DEPRECATED_excludePackageNameSet=None, sessionId=None, parentSessionId=None, timezone=None, GP_version=None, adSourceList=None, campaignKind=None, googleAdvertisingId=None, osVersionCode=None, DEPRECATED_publisherType=thrift_spec[41][4], DEPRECATED_excludeAdvertiserIdSet=None, DEPRECATED_whiteCampaignIdSet=None, networkId=None, requestId=None, unitSize=None, offset=thrift_spec[47][4], rankerName=None, nativeInfoList=None, showedCampaignIdList=None, frameNum=None, idfa=None, recallADNOffer=None, advertiserId=None, trueNum=None, preclickCampaignIds=None, installIdSet=None, includePackageNameSet=None, deviceBrand=None, cityCode=None, smartPVList=None, priceFloor=None, powerPackList=None, realAppId=None, unSupportSdkTruenum=None, ua=None, idCheck=None, osVersionCodeV2=None, ifSupportSeperateCreative=None, videoVersion=None, cleverPackList=None, prePid=None, videow=None, videoh=None, rankerInfo=None, debugMode=thrift_spec[76][4], apiVersion=None, resourceType=None, lowDevice=thrift_spec[79][4], unifiedDevBrand=None, unifiedDevModel=None, bidFloor=None, targetPackageNameSet=None, parentUnitId=None, mofData=None, systemId=None, sysbkupId=None, pubFlowExpectPrice=None, fillEcpmFloor=None, imeiMd5=None, devIdMd5=None, gaidMd5=None, idfaMd5=None, ifSupportBigTemplate=None, placementId=None, passthroughData=None, ifSupportDco=None, audienceIds=None, ifSupportRewardPlus=None, webEnv=None, ifSupportPolaris=None, rtbParams=None, testMode=thrift_spec[666][4], randNum=thrift_spec[667][4], tcType=None,):
    self.timestamp = timestamp
    self.appId = appId
    self.unitId = unitId
    self.scenario = scenario
    self.adTypeStr = adTypeStr
    self.excludeIdSet = excludeIdSet
    self.adNum = adNum
    self.imageSizeId = imageSizeId
    self.requestType = requestType
    self.category = category
    self.platform = platform
    self.osVersion = osVersion
    self.sdkVersion = sdkVersion
    self.packageName = packageName
    self.appVersionName = appVersionName
    self.appVersionCode = appVersionCode
    self.imei = imei
    self.mac = mac
    self.devId = devId
    self.deviceModel = deviceModel
    self.screenSize = screenSize
    self.orientation = orientation
    self.mnc = mnc
    self.mcc = mcc
    self.networkType = networkType
    self.language = language
    self.ip = ip
    self.adnServerIp = adnServerIp
    self.countryCode = countryCode
    self.DEPRECATED_publisherId = DEPRECATED_publisherId
    self.DEPRECATED_campaignType = DEPRECATED_campaignType
    self.DEPRECATED_excludePackageNameSet = DEPRECATED_excludePackageNameSet
    self.sessionId = sessionId
    self.parentSessionId = parentSessionId
    self.timezone = timezone
    self.GP_version = GP_version
    self.adSourceList = adSourceList
    self.campaignKind = campaignKind
    self.googleAdvertisingId = googleAdvertisingId
    self.osVersionCode = osVersionCode
    self.DEPRECATED_publisherType = DEPRECATED_publisherType
    self.DEPRECATED_excludeAdvertiserIdSet = DEPRECATED_excludeAdvertiserIdSet
    self.DEPRECATED_whiteCampaignIdSet = DEPRECATED_whiteCampaignIdSet
    self.networkId = networkId
    self.requestId = requestId
    self.unitSize = unitSize
    self.offset = offset
    self.rankerName = rankerName
    self.nativeInfoList = nativeInfoList
    self.showedCampaignIdList = showedCampaignIdList
    self.frameNum = frameNum
    self.idfa = idfa
    self.recallADNOffer = recallADNOffer
    self.advertiserId = advertiserId
    self.trueNum = trueNum
    self.preclickCampaignIds = preclickCampaignIds
    self.installIdSet = installIdSet
    self.includePackageNameSet = includePackageNameSet
    self.deviceBrand = deviceBrand
    self.cityCode = cityCode
    self.smartPVList = smartPVList
    self.priceFloor = priceFloor
    self.powerPackList = powerPackList
    self.realAppId = realAppId
    self.unSupportSdkTruenum = unSupportSdkTruenum
    self.ua = ua
    self.idCheck = idCheck
    self.osVersionCodeV2 = osVersionCodeV2
    self.ifSupportSeperateCreative = ifSupportSeperateCreative
    self.videoVersion = videoVersion
    self.cleverPackList = cleverPackList
    self.prePid = prePid
    self.videow = videow
    self.videoh = videoh
    self.rankerInfo = rankerInfo
    self.debugMode = debugMode
    self.apiVersion = apiVersion
    self.resourceType = resourceType
    self.lowDevice = lowDevice
    self.unifiedDevBrand = unifiedDevBrand
    self.unifiedDevModel = unifiedDevModel
    self.bidFloor = bidFloor
    self.targetPackageNameSet = targetPackageNameSet
    self.parentUnitId = parentUnitId
    self.mofData = mofData
    self.systemId = systemId
    self.sysbkupId = sysbkupId
    self.pubFlowExpectPrice = pubFlowExpectPrice
    self.fillEcpmFloor = fillEcpmFloor
    self.imeiMd5 = imeiMd5
    self.devIdMd5 = devIdMd5
    self.gaidMd5 = gaidMd5
    self.idfaMd5 = idfaMd5
    self.ifSupportBigTemplate = ifSupportBigTemplate
    self.placementId = placementId
    self.passthroughData = passthroughData
    self.ifSupportDco = ifSupportDco
    self.audienceIds = audienceIds
    self.ifSupportRewardPlus = ifSupportRewardPlus
    self.webEnv = webEnv
    self.ifSupportPolaris = ifSupportPolaris
    self.rtbParams = rtbParams
    self.testMode = testMode
    self.randNum = randNum
    self.tcType = tcType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.appId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.unitId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.scenario = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.adTypeStr = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.SET:
          self.excludeIdSet = set()
          (_etype38, _size35) = iprot.readSetBegin()
          for _i39 in range(_size35):
            _elem40 = iprot.readI64()
            self.excludeIdSet.add(_elem40)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.adNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.imageSizeId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.requestType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.category = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.platform = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.osVersion = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.sdkVersion = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.packageName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.appVersionName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.appVersionCode = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.imei = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.mac = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.devId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.deviceModel = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.screenSize = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.orientation = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.mnc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.mcc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.networkType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.language = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.adnServerIp = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRING:
          self.countryCode = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.DEPRECATED_publisherId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.DEPRECATED_campaignType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.SET:
          self.DEPRECATED_excludePackageNameSet = set()
          (_etype44, _size41) = iprot.readSetBegin()
          for _i45 in range(_size41):
            _elem46 = iprot.readString()
            self.DEPRECATED_excludePackageNameSet.add(_elem46)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.STRING:
          self.parentSessionId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.STRING:
          self.timezone = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.STRING:
          self.GP_version = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.LIST:
          self.adSourceList = []
          (_etype50, _size47) = iprot.readListBegin()
          for _i51 in range(_size47):
            _elem52 = iprot.readI32()
            self.adSourceList.append(_elem52)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.STRING:
          self.campaignKind = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.STRING:
          self.googleAdvertisingId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.osVersionCode = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I32:
          self.DEPRECATED_publisherType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.SET:
          self.DEPRECATED_excludeAdvertiserIdSet = set()
          (_etype56, _size53) = iprot.readSetBegin()
          for _i57 in range(_size53):
            _elem58 = iprot.readI64()
            self.DEPRECATED_excludeAdvertiserIdSet.add(_elem58)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.SET:
          self.DEPRECATED_whiteCampaignIdSet = set()
          (_etype62, _size59) = iprot.readSetBegin()
          for _i63 in range(_size59):
            _elem64 = iprot.readI64()
            self.DEPRECATED_whiteCampaignIdSet.add(_elem64)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.I64:
          self.networkId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.STRING:
          self.requestId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.STRING:
          self.unitSize = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.I32:
          self.offset = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.STRING:
          self.rankerName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.LIST:
          self.nativeInfoList = []
          (_etype68, _size65) = iprot.readListBegin()
          for _i69 in range(_size65):
            _elem70 = NativeInfo()
            _elem70.read(iprot)
            self.nativeInfoList.append(_elem70)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.LIST:
          self.showedCampaignIdList = []
          (_etype74, _size71) = iprot.readListBegin()
          for _i75 in range(_size71):
            _elem76 = iprot.readI64()
            self.showedCampaignIdList.append(_elem76)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.I64:
          self.frameNum = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.STRING:
          self.idfa = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.I32:
          self.recallADNOffer = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.I64:
          self.advertiserId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.I64:
          self.trueNum = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.LIST:
          self.preclickCampaignIds = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in range(_size77):
            _elem82 = iprot.readI64()
            self.preclickCampaignIds.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.SET:
          self.installIdSet = set()
          (_etype86, _size83) = iprot.readSetBegin()
          for _i87 in range(_size83):
            _elem88 = iprot.readI64()
            self.installIdSet.add(_elem88)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 58:
        if ftype == TType.SET:
          self.includePackageNameSet = set()
          (_etype92, _size89) = iprot.readSetBegin()
          for _i93 in range(_size89):
            _elem94 = iprot.readString()
            self.includePackageNameSet.add(_elem94)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 59:
        if ftype == TType.STRING:
          self.deviceBrand = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.I64:
          self.cityCode = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 61:
        if ftype == TType.LIST:
          self.smartPVList = []
          (_etype98, _size95) = iprot.readListBegin()
          for _i99 in range(_size95):
            _elem100 = SmartPV()
            _elem100.read(iprot)
            self.smartPVList.append(_elem100)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 62:
        if ftype == TType.DOUBLE:
          self.priceFloor = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 63:
        if ftype == TType.LIST:
          self.powerPackList = []
          (_etype104, _size101) = iprot.readListBegin()
          for _i105 in range(_size101):
            _elem106 = SmartPV()
            _elem106.read(iprot)
            self.powerPackList.append(_elem106)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 64:
        if ftype == TType.I64:
          self.realAppId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 65:
        if ftype == TType.I32:
          self.unSupportSdkTruenum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 66:
        if ftype == TType.STRING:
          self.ua = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 67:
        if ftype == TType.SET:
          self.idCheck = set()
          (_etype110, _size107) = iprot.readSetBegin()
          for _i111 in range(_size107):
            _elem112 = iprot.readI64()
            self.idCheck.add(_elem112)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 68:
        if ftype == TType.I32:
          self.osVersionCodeV2 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 69:
        if ftype == TType.I32:
          self.ifSupportSeperateCreative = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.STRING:
          self.videoVersion = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 71:
        if ftype == TType.LIST:
          self.cleverPackList = []
          (_etype116, _size113) = iprot.readListBegin()
          for _i117 in range(_size113):
            _elem118 = SmartPV()
            _elem118.read(iprot)
            self.cleverPackList.append(_elem118)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 72:
        if ftype == TType.LIST:
          self.prePid = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in range(_size119):
            _elem124 = iprot.readI64()
            self.prePid.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 73:
        if ftype == TType.I32:
          self.videow = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 74:
        if ftype == TType.I32:
          self.videoh = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 75:
        if ftype == TType.STRING:
          self.rankerInfo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 76:
        if ftype == TType.BOOL:
          self.debugMode = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 77:
        if ftype == TType.I32:
          self.apiVersion = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 78:
        if ftype == TType.I32:
          self.resourceType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 79:
        if ftype == TType.BOOL:
          self.lowDevice = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 80:
        if ftype == TType.STRING:
          self.unifiedDevBrand = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 81:
        if ftype == TType.STRING:
          self.unifiedDevModel = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 82:
        if ftype == TType.DOUBLE:
          self.bidFloor = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 83:
        if ftype == TType.SET:
          self.targetPackageNameSet = set()
          (_etype128, _size125) = iprot.readSetBegin()
          for _i129 in range(_size125):
            _elem130 = iprot.readString()
            self.targetPackageNameSet.add(_elem130)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 84:
        if ftype == TType.I64:
          self.parentUnitId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 85:
        if ftype == TType.STRING:
          self.mofData = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 86:
        if ftype == TType.STRING:
          self.systemId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 87:
        if ftype == TType.STRING:
          self.sysbkupId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 88:
        if ftype == TType.DOUBLE:
          self.pubFlowExpectPrice = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 89:
        if ftype == TType.DOUBLE:
          self.fillEcpmFloor = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 90:
        if ftype == TType.STRING:
          self.imeiMd5 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 91:
        if ftype == TType.STRING:
          self.devIdMd5 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 92:
        if ftype == TType.STRING:
          self.gaidMd5 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 93:
        if ftype == TType.STRING:
          self.idfaMd5 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 94:
        if ftype == TType.I32:
          self.ifSupportBigTemplate = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 95:
        if ftype == TType.I64:
          self.placementId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 96:
        if ftype == TType.MAP:
          self.passthroughData = {}
          (_ktype132, _vtype133, _size131 ) = iprot.readMapBegin()
          for _i135 in range(_size131):
            _key136 = iprot.readString()
            _val137 = iprot.readString()
            self.passthroughData[_key136] = _val137
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 97:
        if ftype == TType.I32:
          self.ifSupportDco = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 98:
        if ftype == TType.LIST:
          self.audienceIds = []
          (_etype141, _size138) = iprot.readListBegin()
          for _i142 in range(_size138):
            _elem143 = iprot.readI64()
            self.audienceIds.append(_elem143)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 99:
        if ftype == TType.I32:
          self.ifSupportRewardPlus = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.MAP:
          self.webEnv = {}
          (_ktype145, _vtype146, _size144 ) = iprot.readMapBegin()
          for _i148 in range(_size144):
            _key149 = iprot.readString()
            _val150 = iprot.readString()
            self.webEnv[_key149] = _val150
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 200:
        if ftype == TType.I32:
          self.ifSupportPolaris = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 201:
        if ftype == TType.STRUCT:
          self.rtbParams = RTBParams()
          self.rtbParams.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 666:
        if ftype == TType.I32:
          self.testMode = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 667:
        if ftype == TType.I32:
          self.randNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 800:
        if ftype == TType.I32:
          self.tcType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryParam')
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 1)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.appId is not None:
      oprot.writeFieldBegin('appId', TType.I64, 2)
      oprot.writeI64(self.appId)
      oprot.writeFieldEnd()
    if self.unitId is not None:
      oprot.writeFieldBegin('unitId', TType.I64, 3)
      oprot.writeI64(self.unitId)
      oprot.writeFieldEnd()
    if self.scenario is not None:
      oprot.writeFieldBegin('scenario', TType.STRING, 4)
      oprot.writeString(self.scenario)
      oprot.writeFieldEnd()
    if self.adTypeStr is not None:
      oprot.writeFieldBegin('adTypeStr', TType.STRING, 5)
      oprot.writeString(self.adTypeStr)
      oprot.writeFieldEnd()
    if self.excludeIdSet is not None:
      oprot.writeFieldBegin('excludeIdSet', TType.SET, 6)
      oprot.writeSetBegin(TType.I64, len(self.excludeIdSet))
      for iter151 in self.excludeIdSet:
        oprot.writeI64(iter151)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.adNum is not None:
      oprot.writeFieldBegin('adNum', TType.I32, 7)
      oprot.writeI32(self.adNum)
      oprot.writeFieldEnd()
    if self.imageSizeId is not None:
      oprot.writeFieldBegin('imageSizeId', TType.I32, 8)
      oprot.writeI32(self.imageSizeId)
      oprot.writeFieldEnd()
    if self.requestType is not None:
      oprot.writeFieldBegin('requestType', TType.I32, 9)
      oprot.writeI32(self.requestType)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.I32, 10)
      oprot.writeI32(self.category)
      oprot.writeFieldEnd()
    if self.platform is not None:
      oprot.writeFieldBegin('platform', TType.I32, 11)
      oprot.writeI32(self.platform)
      oprot.writeFieldEnd()
    if self.osVersion is not None:
      oprot.writeFieldBegin('osVersion', TType.STRING, 12)
      oprot.writeString(self.osVersion)
      oprot.writeFieldEnd()
    if self.sdkVersion is not None:
      oprot.writeFieldBegin('sdkVersion', TType.STRING, 13)
      oprot.writeString(self.sdkVersion)
      oprot.writeFieldEnd()
    if self.packageName is not None:
      oprot.writeFieldBegin('packageName', TType.STRING, 14)
      oprot.writeString(self.packageName)
      oprot.writeFieldEnd()
    if self.appVersionName is not None:
      oprot.writeFieldBegin('appVersionName', TType.STRING, 15)
      oprot.writeString(self.appVersionName)
      oprot.writeFieldEnd()
    if self.appVersionCode is not None:
      oprot.writeFieldBegin('appVersionCode', TType.STRING, 16)
      oprot.writeString(self.appVersionCode)
      oprot.writeFieldEnd()
    if self.imei is not None:
      oprot.writeFieldBegin('imei', TType.STRING, 17)
      oprot.writeString(self.imei)
      oprot.writeFieldEnd()
    if self.mac is not None:
      oprot.writeFieldBegin('mac', TType.STRING, 18)
      oprot.writeString(self.mac)
      oprot.writeFieldEnd()
    if self.devId is not None:
      oprot.writeFieldBegin('devId', TType.STRING, 19)
      oprot.writeString(self.devId)
      oprot.writeFieldEnd()
    if self.deviceModel is not None:
      oprot.writeFieldBegin('deviceModel', TType.STRING, 20)
      oprot.writeString(self.deviceModel)
      oprot.writeFieldEnd()
    if self.screenSize is not None:
      oprot.writeFieldBegin('screenSize', TType.STRING, 21)
      oprot.writeString(self.screenSize)
      oprot.writeFieldEnd()
    if self.orientation is not None:
      oprot.writeFieldBegin('orientation', TType.I32, 22)
      oprot.writeI32(self.orientation)
      oprot.writeFieldEnd()
    if self.mnc is not None:
      oprot.writeFieldBegin('mnc', TType.STRING, 23)
      oprot.writeString(self.mnc)
      oprot.writeFieldEnd()
    if self.mcc is not None:
      oprot.writeFieldBegin('mcc', TType.STRING, 24)
      oprot.writeString(self.mcc)
      oprot.writeFieldEnd()
    if self.networkType is not None:
      oprot.writeFieldBegin('networkType', TType.I32, 25)
      oprot.writeI32(self.networkType)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.STRING, 26)
      oprot.writeString(self.language)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 27)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.adnServerIp is not None:
      oprot.writeFieldBegin('adnServerIp', TType.STRING, 28)
      oprot.writeString(self.adnServerIp)
      oprot.writeFieldEnd()
    if self.countryCode is not None:
      oprot.writeFieldBegin('countryCode', TType.STRING, 29)
      oprot.writeString(self.countryCode)
      oprot.writeFieldEnd()
    if self.DEPRECATED_publisherId is not None:
      oprot.writeFieldBegin('DEPRECATED_publisherId', TType.I64, 30)
      oprot.writeI64(self.DEPRECATED_publisherId)
      oprot.writeFieldEnd()
    if self.DEPRECATED_campaignType is not None:
      oprot.writeFieldBegin('DEPRECATED_campaignType', TType.I32, 31)
      oprot.writeI32(self.DEPRECATED_campaignType)
      oprot.writeFieldEnd()
    if self.DEPRECATED_excludePackageNameSet is not None:
      oprot.writeFieldBegin('DEPRECATED_excludePackageNameSet', TType.SET, 32)
      oprot.writeSetBegin(TType.STRING, len(self.DEPRECATED_excludePackageNameSet))
      for iter152 in self.DEPRECATED_excludePackageNameSet:
        oprot.writeString(iter152)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 33)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.parentSessionId is not None:
      oprot.writeFieldBegin('parentSessionId', TType.STRING, 34)
      oprot.writeString(self.parentSessionId)
      oprot.writeFieldEnd()
    if self.timezone is not None:
      oprot.writeFieldBegin('timezone', TType.STRING, 35)
      oprot.writeString(self.timezone)
      oprot.writeFieldEnd()
    if self.GP_version is not None:
      oprot.writeFieldBegin('GP_version', TType.STRING, 36)
      oprot.writeString(self.GP_version)
      oprot.writeFieldEnd()
    if self.adSourceList is not None:
      oprot.writeFieldBegin('adSourceList', TType.LIST, 37)
      oprot.writeListBegin(TType.I32, len(self.adSourceList))
      for iter153 in self.adSourceList:
        oprot.writeI32(iter153)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.campaignKind is not None:
      oprot.writeFieldBegin('campaignKind', TType.STRING, 38)
      oprot.writeString(self.campaignKind)
      oprot.writeFieldEnd()
    if self.googleAdvertisingId is not None:
      oprot.writeFieldBegin('googleAdvertisingId', TType.STRING, 39)
      oprot.writeString(self.googleAdvertisingId)
      oprot.writeFieldEnd()
    if self.osVersionCode is not None:
      oprot.writeFieldBegin('osVersionCode', TType.I32, 40)
      oprot.writeI32(self.osVersionCode)
      oprot.writeFieldEnd()
    if self.DEPRECATED_publisherType is not None:
      oprot.writeFieldBegin('DEPRECATED_publisherType', TType.I32, 41)
      oprot.writeI32(self.DEPRECATED_publisherType)
      oprot.writeFieldEnd()
    if self.DEPRECATED_excludeAdvertiserIdSet is not None:
      oprot.writeFieldBegin('DEPRECATED_excludeAdvertiserIdSet', TType.SET, 42)
      oprot.writeSetBegin(TType.I64, len(self.DEPRECATED_excludeAdvertiserIdSet))
      for iter154 in self.DEPRECATED_excludeAdvertiserIdSet:
        oprot.writeI64(iter154)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.DEPRECATED_whiteCampaignIdSet is not None:
      oprot.writeFieldBegin('DEPRECATED_whiteCampaignIdSet', TType.SET, 43)
      oprot.writeSetBegin(TType.I64, len(self.DEPRECATED_whiteCampaignIdSet))
      for iter155 in self.DEPRECATED_whiteCampaignIdSet:
        oprot.writeI64(iter155)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.networkId is not None:
      oprot.writeFieldBegin('networkId', TType.I64, 44)
      oprot.writeI64(self.networkId)
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 45)
      oprot.writeString(self.requestId)
      oprot.writeFieldEnd()
    if self.unitSize is not None:
      oprot.writeFieldBegin('unitSize', TType.STRING, 46)
      oprot.writeString(self.unitSize)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 47)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    if self.rankerName is not None:
      oprot.writeFieldBegin('rankerName', TType.STRING, 48)
      oprot.writeString(self.rankerName)
      oprot.writeFieldEnd()
    if self.nativeInfoList is not None:
      oprot.writeFieldBegin('nativeInfoList', TType.LIST, 49)
      oprot.writeListBegin(TType.STRUCT, len(self.nativeInfoList))
      for iter156 in self.nativeInfoList:
        iter156.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.showedCampaignIdList is not None:
      oprot.writeFieldBegin('showedCampaignIdList', TType.LIST, 50)
      oprot.writeListBegin(TType.I64, len(self.showedCampaignIdList))
      for iter157 in self.showedCampaignIdList:
        oprot.writeI64(iter157)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.frameNum is not None:
      oprot.writeFieldBegin('frameNum', TType.I64, 51)
      oprot.writeI64(self.frameNum)
      oprot.writeFieldEnd()
    if self.idfa is not None:
      oprot.writeFieldBegin('idfa', TType.STRING, 52)
      oprot.writeString(self.idfa)
      oprot.writeFieldEnd()
    if self.recallADNOffer is not None:
      oprot.writeFieldBegin('recallADNOffer', TType.I32, 53)
      oprot.writeI32(self.recallADNOffer)
      oprot.writeFieldEnd()
    if self.advertiserId is not None:
      oprot.writeFieldBegin('advertiserId', TType.I64, 54)
      oprot.writeI64(self.advertiserId)
      oprot.writeFieldEnd()
    if self.trueNum is not None:
      oprot.writeFieldBegin('trueNum', TType.I64, 55)
      oprot.writeI64(self.trueNum)
      oprot.writeFieldEnd()
    if self.preclickCampaignIds is not None:
      oprot.writeFieldBegin('preclickCampaignIds', TType.LIST, 56)
      oprot.writeListBegin(TType.I64, len(self.preclickCampaignIds))
      for iter158 in self.preclickCampaignIds:
        oprot.writeI64(iter158)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.installIdSet is not None:
      oprot.writeFieldBegin('installIdSet', TType.SET, 57)
      oprot.writeSetBegin(TType.I64, len(self.installIdSet))
      for iter159 in self.installIdSet:
        oprot.writeI64(iter159)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.includePackageNameSet is not None:
      oprot.writeFieldBegin('includePackageNameSet', TType.SET, 58)
      oprot.writeSetBegin(TType.STRING, len(self.includePackageNameSet))
      for iter160 in self.includePackageNameSet:
        oprot.writeString(iter160)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.deviceBrand is not None:
      oprot.writeFieldBegin('deviceBrand', TType.STRING, 59)
      oprot.writeString(self.deviceBrand)
      oprot.writeFieldEnd()
    if self.cityCode is not None:
      oprot.writeFieldBegin('cityCode', TType.I64, 60)
      oprot.writeI64(self.cityCode)
      oprot.writeFieldEnd()
    if self.smartPVList is not None:
      oprot.writeFieldBegin('smartPVList', TType.LIST, 61)
      oprot.writeListBegin(TType.STRUCT, len(self.smartPVList))
      for iter161 in self.smartPVList:
        iter161.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.priceFloor is not None:
      oprot.writeFieldBegin('priceFloor', TType.DOUBLE, 62)
      oprot.writeDouble(self.priceFloor)
      oprot.writeFieldEnd()
    if self.powerPackList is not None:
      oprot.writeFieldBegin('powerPackList', TType.LIST, 63)
      oprot.writeListBegin(TType.STRUCT, len(self.powerPackList))
      for iter162 in self.powerPackList:
        iter162.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.realAppId is not None:
      oprot.writeFieldBegin('realAppId', TType.I64, 64)
      oprot.writeI64(self.realAppId)
      oprot.writeFieldEnd()
    if self.unSupportSdkTruenum is not None:
      oprot.writeFieldBegin('unSupportSdkTruenum', TType.I32, 65)
      oprot.writeI32(self.unSupportSdkTruenum)
      oprot.writeFieldEnd()
    if self.ua is not None:
      oprot.writeFieldBegin('ua', TType.STRING, 66)
      oprot.writeString(self.ua)
      oprot.writeFieldEnd()
    if self.idCheck is not None:
      oprot.writeFieldBegin('idCheck', TType.SET, 67)
      oprot.writeSetBegin(TType.I64, len(self.idCheck))
      for iter163 in self.idCheck:
        oprot.writeI64(iter163)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.osVersionCodeV2 is not None:
      oprot.writeFieldBegin('osVersionCodeV2', TType.I32, 68)
      oprot.writeI32(self.osVersionCodeV2)
      oprot.writeFieldEnd()
    if self.ifSupportSeperateCreative is not None:
      oprot.writeFieldBegin('ifSupportSeperateCreative', TType.I32, 69)
      oprot.writeI32(self.ifSupportSeperateCreative)
      oprot.writeFieldEnd()
    if self.videoVersion is not None:
      oprot.writeFieldBegin('videoVersion', TType.STRING, 70)
      oprot.writeString(self.videoVersion)
      oprot.writeFieldEnd()
    if self.cleverPackList is not None:
      oprot.writeFieldBegin('cleverPackList', TType.LIST, 71)
      oprot.writeListBegin(TType.STRUCT, len(self.cleverPackList))
      for iter164 in self.cleverPackList:
        iter164.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.prePid is not None:
      oprot.writeFieldBegin('prePid', TType.LIST, 72)
      oprot.writeListBegin(TType.I64, len(self.prePid))
      for iter165 in self.prePid:
        oprot.writeI64(iter165)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.videow is not None:
      oprot.writeFieldBegin('videow', TType.I32, 73)
      oprot.writeI32(self.videow)
      oprot.writeFieldEnd()
    if self.videoh is not None:
      oprot.writeFieldBegin('videoh', TType.I32, 74)
      oprot.writeI32(self.videoh)
      oprot.writeFieldEnd()
    if self.rankerInfo is not None:
      oprot.writeFieldBegin('rankerInfo', TType.STRING, 75)
      oprot.writeString(self.rankerInfo)
      oprot.writeFieldEnd()
    if self.debugMode is not None:
      oprot.writeFieldBegin('debugMode', TType.BOOL, 76)
      oprot.writeBool(self.debugMode)
      oprot.writeFieldEnd()
    if self.apiVersion is not None:
      oprot.writeFieldBegin('apiVersion', TType.I32, 77)
      oprot.writeI32(self.apiVersion)
      oprot.writeFieldEnd()
    if self.resourceType is not None:
      oprot.writeFieldBegin('resourceType', TType.I32, 78)
      oprot.writeI32(self.resourceType)
      oprot.writeFieldEnd()
    if self.lowDevice is not None:
      oprot.writeFieldBegin('lowDevice', TType.BOOL, 79)
      oprot.writeBool(self.lowDevice)
      oprot.writeFieldEnd()
    if self.unifiedDevBrand is not None:
      oprot.writeFieldBegin('unifiedDevBrand', TType.STRING, 80)
      oprot.writeString(self.unifiedDevBrand)
      oprot.writeFieldEnd()
    if self.unifiedDevModel is not None:
      oprot.writeFieldBegin('unifiedDevModel', TType.STRING, 81)
      oprot.writeString(self.unifiedDevModel)
      oprot.writeFieldEnd()
    if self.bidFloor is not None:
      oprot.writeFieldBegin('bidFloor', TType.DOUBLE, 82)
      oprot.writeDouble(self.bidFloor)
      oprot.writeFieldEnd()
    if self.targetPackageNameSet is not None:
      oprot.writeFieldBegin('targetPackageNameSet', TType.SET, 83)
      oprot.writeSetBegin(TType.STRING, len(self.targetPackageNameSet))
      for iter166 in self.targetPackageNameSet:
        oprot.writeString(iter166)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.parentUnitId is not None:
      oprot.writeFieldBegin('parentUnitId', TType.I64, 84)
      oprot.writeI64(self.parentUnitId)
      oprot.writeFieldEnd()
    if self.mofData is not None:
      oprot.writeFieldBegin('mofData', TType.STRING, 85)
      oprot.writeString(self.mofData)
      oprot.writeFieldEnd()
    if self.systemId is not None:
      oprot.writeFieldBegin('systemId', TType.STRING, 86)
      oprot.writeString(self.systemId)
      oprot.writeFieldEnd()
    if self.sysbkupId is not None:
      oprot.writeFieldBegin('sysbkupId', TType.STRING, 87)
      oprot.writeString(self.sysbkupId)
      oprot.writeFieldEnd()
    if self.pubFlowExpectPrice is not None:
      oprot.writeFieldBegin('pubFlowExpectPrice', TType.DOUBLE, 88)
      oprot.writeDouble(self.pubFlowExpectPrice)
      oprot.writeFieldEnd()
    if self.fillEcpmFloor is not None:
      oprot.writeFieldBegin('fillEcpmFloor', TType.DOUBLE, 89)
      oprot.writeDouble(self.fillEcpmFloor)
      oprot.writeFieldEnd()
    if self.imeiMd5 is not None:
      oprot.writeFieldBegin('imeiMd5', TType.STRING, 90)
      oprot.writeString(self.imeiMd5)
      oprot.writeFieldEnd()
    if self.devIdMd5 is not None:
      oprot.writeFieldBegin('devIdMd5', TType.STRING, 91)
      oprot.writeString(self.devIdMd5)
      oprot.writeFieldEnd()
    if self.gaidMd5 is not None:
      oprot.writeFieldBegin('gaidMd5', TType.STRING, 92)
      oprot.writeString(self.gaidMd5)
      oprot.writeFieldEnd()
    if self.idfaMd5 is not None:
      oprot.writeFieldBegin('idfaMd5', TType.STRING, 93)
      oprot.writeString(self.idfaMd5)
      oprot.writeFieldEnd()
    if self.ifSupportBigTemplate is not None:
      oprot.writeFieldBegin('ifSupportBigTemplate', TType.I32, 94)
      oprot.writeI32(self.ifSupportBigTemplate)
      oprot.writeFieldEnd()
    if self.placementId is not None:
      oprot.writeFieldBegin('placementId', TType.I64, 95)
      oprot.writeI64(self.placementId)
      oprot.writeFieldEnd()
    if self.passthroughData is not None:
      oprot.writeFieldBegin('passthroughData', TType.MAP, 96)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.passthroughData))
      for kiter167,viter168 in self.passthroughData.items():
        oprot.writeString(kiter167)
        oprot.writeString(viter168)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ifSupportDco is not None:
      oprot.writeFieldBegin('ifSupportDco', TType.I32, 97)
      oprot.writeI32(self.ifSupportDco)
      oprot.writeFieldEnd()
    if self.audienceIds is not None:
      oprot.writeFieldBegin('audienceIds', TType.LIST, 98)
      oprot.writeListBegin(TType.I64, len(self.audienceIds))
      for iter169 in self.audienceIds:
        oprot.writeI64(iter169)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ifSupportRewardPlus is not None:
      oprot.writeFieldBegin('ifSupportRewardPlus', TType.I32, 99)
      oprot.writeI32(self.ifSupportRewardPlus)
      oprot.writeFieldEnd()
    if self.webEnv is not None:
      oprot.writeFieldBegin('webEnv', TType.MAP, 100)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.webEnv))
      for kiter170,viter171 in self.webEnv.items():
        oprot.writeString(kiter170)
        oprot.writeString(viter171)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ifSupportPolaris is not None:
      oprot.writeFieldBegin('ifSupportPolaris', TType.I32, 200)
      oprot.writeI32(self.ifSupportPolaris)
      oprot.writeFieldEnd()
    if self.rtbParams is not None:
      oprot.writeFieldBegin('rtbParams', TType.STRUCT, 201)
      self.rtbParams.write(oprot)
      oprot.writeFieldEnd()
    if self.testMode is not None:
      oprot.writeFieldBegin('testMode', TType.I32, 666)
      oprot.writeI32(self.testMode)
      oprot.writeFieldEnd()
    if self.randNum is not None:
      oprot.writeFieldBegin('randNum', TType.I32, 667)
      oprot.writeI32(self.randNum)
      oprot.writeFieldEnd()
    if self.tcType is not None:
      oprot.writeFieldBegin('tcType', TType.I32, 800)
      oprot.writeI32(self.tcType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    if self.adNum is None:
      raise TProtocol.TProtocolException(message='Required field adNum is unset!')
    if self.imageSizeId is None:
      raise TProtocol.TProtocolException(message='Required field imageSizeId is unset!')
    if self.requestType is None:
      raise TProtocol.TProtocolException(message='Required field requestType is unset!')
    if self.category is None:
      raise TProtocol.TProtocolException(message='Required field category is unset!')
    if self.platform is None:
      raise TProtocol.TProtocolException(message='Required field platform is unset!')
    if self.osVersion is None:
      raise TProtocol.TProtocolException(message='Required field osVersion is unset!')
    if self.sdkVersion is None:
      raise TProtocol.TProtocolException(message='Required field sdkVersion is unset!')
    if self.packageName is None:
      raise TProtocol.TProtocolException(message='Required field packageName is unset!')
    if self.appVersionName is None:
      raise TProtocol.TProtocolException(message='Required field appVersionName is unset!')
    if self.appVersionCode is None:
      raise TProtocol.TProtocolException(message='Required field appVersionCode is unset!')
    if self.imei is None:
      raise TProtocol.TProtocolException(message='Required field imei is unset!')
    if self.mac is None:
      raise TProtocol.TProtocolException(message='Required field mac is unset!')
    if self.devId is None:
      raise TProtocol.TProtocolException(message='Required field devId is unset!')
    if self.deviceModel is None:
      raise TProtocol.TProtocolException(message='Required field deviceModel is unset!')
    if self.screenSize is None:
      raise TProtocol.TProtocolException(message='Required field screenSize is unset!')
    if self.orientation is None:
      raise TProtocol.TProtocolException(message='Required field orientation is unset!')
    if self.mnc is None:
      raise TProtocol.TProtocolException(message='Required field mnc is unset!')
    if self.mcc is None:
      raise TProtocol.TProtocolException(message='Required field mcc is unset!')
    if self.networkType is None:
      raise TProtocol.TProtocolException(message='Required field networkType is unset!')
    if self.language is None:
      raise TProtocol.TProtocolException(message='Required field language is unset!')
    if self.ip is None:
      raise TProtocol.TProtocolException(message='Required field ip is unset!')
    if self.adnServerIp is None:
      raise TProtocol.TProtocolException(message='Required field adnServerIp is unset!')
    if self.countryCode is None:
      raise TProtocol.TProtocolException(message='Required field countryCode is unset!')
    if self.GP_version is None:
      raise TProtocol.TProtocolException(message='Required field GP_version is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.appId)
    value = (value * 31) ^ hash(self.unitId)
    value = (value * 31) ^ hash(self.scenario)
    value = (value * 31) ^ hash(self.adTypeStr)
    value = (value * 31) ^ hash(self.excludeIdSet)
    value = (value * 31) ^ hash(self.adNum)
    value = (value * 31) ^ hash(self.imageSizeId)
    value = (value * 31) ^ hash(self.requestType)
    value = (value * 31) ^ hash(self.category)
    value = (value * 31) ^ hash(self.platform)
    value = (value * 31) ^ hash(self.osVersion)
    value = (value * 31) ^ hash(self.sdkVersion)
    value = (value * 31) ^ hash(self.packageName)
    value = (value * 31) ^ hash(self.appVersionName)
    value = (value * 31) ^ hash(self.appVersionCode)
    value = (value * 31) ^ hash(self.imei)
    value = (value * 31) ^ hash(self.mac)
    value = (value * 31) ^ hash(self.devId)
    value = (value * 31) ^ hash(self.deviceModel)
    value = (value * 31) ^ hash(self.screenSize)
    value = (value * 31) ^ hash(self.orientation)
    value = (value * 31) ^ hash(self.mnc)
    value = (value * 31) ^ hash(self.mcc)
    value = (value * 31) ^ hash(self.networkType)
    value = (value * 31) ^ hash(self.language)
    value = (value * 31) ^ hash(self.ip)
    value = (value * 31) ^ hash(self.adnServerIp)
    value = (value * 31) ^ hash(self.countryCode)
    value = (value * 31) ^ hash(self.DEPRECATED_publisherId)
    value = (value * 31) ^ hash(self.DEPRECATED_campaignType)
    value = (value * 31) ^ hash(self.DEPRECATED_excludePackageNameSet)
    value = (value * 31) ^ hash(self.sessionId)
    value = (value * 31) ^ hash(self.parentSessionId)
    value = (value * 31) ^ hash(self.timezone)
    value = (value * 31) ^ hash(self.GP_version)
    value = (value * 31) ^ hash(self.adSourceList)
    value = (value * 31) ^ hash(self.campaignKind)
    value = (value * 31) ^ hash(self.googleAdvertisingId)
    value = (value * 31) ^ hash(self.osVersionCode)
    value = (value * 31) ^ hash(self.DEPRECATED_publisherType)
    value = (value * 31) ^ hash(self.DEPRECATED_excludeAdvertiserIdSet)
    value = (value * 31) ^ hash(self.DEPRECATED_whiteCampaignIdSet)
    value = (value * 31) ^ hash(self.networkId)
    value = (value * 31) ^ hash(self.requestId)
    value = (value * 31) ^ hash(self.unitSize)
    value = (value * 31) ^ hash(self.offset)
    value = (value * 31) ^ hash(self.rankerName)
    value = (value * 31) ^ hash(self.nativeInfoList)
    value = (value * 31) ^ hash(self.showedCampaignIdList)
    value = (value * 31) ^ hash(self.frameNum)
    value = (value * 31) ^ hash(self.idfa)
    value = (value * 31) ^ hash(self.recallADNOffer)
    value = (value * 31) ^ hash(self.advertiserId)
    value = (value * 31) ^ hash(self.trueNum)
    value = (value * 31) ^ hash(self.preclickCampaignIds)
    value = (value * 31) ^ hash(self.installIdSet)
    value = (value * 31) ^ hash(self.includePackageNameSet)
    value = (value * 31) ^ hash(self.deviceBrand)
    value = (value * 31) ^ hash(self.cityCode)
    value = (value * 31) ^ hash(self.smartPVList)
    value = (value * 31) ^ hash(self.priceFloor)
    value = (value * 31) ^ hash(self.powerPackList)
    value = (value * 31) ^ hash(self.realAppId)
    value = (value * 31) ^ hash(self.unSupportSdkTruenum)
    value = (value * 31) ^ hash(self.ua)
    value = (value * 31) ^ hash(self.idCheck)
    value = (value * 31) ^ hash(self.osVersionCodeV2)
    value = (value * 31) ^ hash(self.ifSupportSeperateCreative)
    value = (value * 31) ^ hash(self.videoVersion)
    value = (value * 31) ^ hash(self.cleverPackList)
    value = (value * 31) ^ hash(self.prePid)
    value = (value * 31) ^ hash(self.videow)
    value = (value * 31) ^ hash(self.videoh)
    value = (value * 31) ^ hash(self.rankerInfo)
    value = (value * 31) ^ hash(self.debugMode)
    value = (value * 31) ^ hash(self.apiVersion)
    value = (value * 31) ^ hash(self.resourceType)
    value = (value * 31) ^ hash(self.lowDevice)
    value = (value * 31) ^ hash(self.unifiedDevBrand)
    value = (value * 31) ^ hash(self.unifiedDevModel)
    value = (value * 31) ^ hash(self.bidFloor)
    value = (value * 31) ^ hash(self.targetPackageNameSet)
    value = (value * 31) ^ hash(self.parentUnitId)
    value = (value * 31) ^ hash(self.mofData)
    value = (value * 31) ^ hash(self.systemId)
    value = (value * 31) ^ hash(self.sysbkupId)
    value = (value * 31) ^ hash(self.pubFlowExpectPrice)
    value = (value * 31) ^ hash(self.fillEcpmFloor)
    value = (value * 31) ^ hash(self.imeiMd5)
    value = (value * 31) ^ hash(self.devIdMd5)
    value = (value * 31) ^ hash(self.gaidMd5)
    value = (value * 31) ^ hash(self.idfaMd5)
    value = (value * 31) ^ hash(self.ifSupportBigTemplate)
    value = (value * 31) ^ hash(self.placementId)
    value = (value * 31) ^ hash(self.passthroughData)
    value = (value * 31) ^ hash(self.ifSupportDco)
    value = (value * 31) ^ hash(self.audienceIds)
    value = (value * 31) ^ hash(self.ifSupportRewardPlus)
    value = (value * 31) ^ hash(self.webEnv)
    value = (value * 31) ^ hash(self.ifSupportPolaris)
    value = (value * 31) ^ hash(self.rtbParams)
    value = (value * 31) ^ hash(self.testMode)
    value = (value * 31) ^ hash(self.randNum)
    value = (value * 31) ^ hash(self.tcType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreativeTypeId:
  """
  Attributes:
   - type
   - creativeId
   - mId
   - cpdId
   - omId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I64, 'creativeId', None, None, ), # 2
    (3, TType.I64, 'mId', None, None, ), # 3
    (4, TType.I64, 'cpdId', None, None, ), # 4
    (5, TType.I64, 'omId', None, None, ), # 5
  )

  def __init__(self, type=None, creativeId=None, mId=None, cpdId=None, omId=None,):
    self.type = type
    self.creativeId = creativeId
    self.mId = mId
    self.cpdId = cpdId
    self.omId = omId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.creativeId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.mId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.cpdId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.omId = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CreativeTypeId')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.creativeId is not None:
      oprot.writeFieldBegin('creativeId', TType.I64, 2)
      oprot.writeI64(self.creativeId)
      oprot.writeFieldEnd()
    if self.mId is not None:
      oprot.writeFieldBegin('mId', TType.I64, 3)
      oprot.writeI64(self.mId)
      oprot.writeFieldEnd()
    if self.cpdId is not None:
      oprot.writeFieldBegin('cpdId', TType.I64, 4)
      oprot.writeI64(self.cpdId)
      oprot.writeFieldEnd()
    if self.omId is not None:
      oprot.writeFieldBegin('omId', TType.I64, 5)
      oprot.writeI64(self.omId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.creativeId is None:
      raise TProtocol.TProtocolException(message='Required field creativeId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.creativeId)
    value = (value * 31) ^ hash(self.mId)
    value = (value * 31) ^ hash(self.cpdId)
    value = (value * 31) ^ hash(self.omId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreativeData:
  """
  Attributes:
   - docId
   - creativeTypeIdList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'docId', None, None, ), # 1
    (2, TType.LIST, 'creativeTypeIdList', (TType.STRUCT,(CreativeTypeId, CreativeTypeId.thrift_spec)), None, ), # 2
  )

  def __init__(self, docId=None, creativeTypeIdList=None,):
    self.docId = docId
    self.creativeTypeIdList = creativeTypeIdList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.docId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.creativeTypeIdList = []
          (_etype175, _size172) = iprot.readListBegin()
          for _i176 in range(_size172):
            _elem177 = CreativeTypeId()
            _elem177.read(iprot)
            self.creativeTypeIdList.append(_elem177)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CreativeData')
    if self.docId is not None:
      oprot.writeFieldBegin('docId', TType.STRING, 1)
      oprot.writeString(self.docId)
      oprot.writeFieldEnd()
    if self.creativeTypeIdList is not None:
      oprot.writeFieldBegin('creativeTypeIdList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.creativeTypeIdList))
      for iter178 in self.creativeTypeIdList:
        iter178.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.docId is None:
      raise TProtocol.TProtocolException(message='Required field docId is unset!')
    if self.creativeTypeIdList is None:
      raise TProtocol.TProtocolException(message='Required field creativeTypeIdList is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.docId)
    value = (value * 31) ^ hash(self.creativeTypeIdList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TemplateElement:
  """
  Attributes:
   - name
   - docId
   - creativeId
   - creativeType
   - advCreativeGid
   - abtestTupleId
   - mId
   - cpdId
   - omId
   - creativePackageType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'docId', None, None, ), # 2
    (3, TType.I64, 'creativeId', None, None, ), # 3
    (4, TType.I64, 'creativeType', None, None, ), # 4
    (5, TType.I64, 'advCreativeGid', None, None, ), # 5
    (6, TType.I64, 'abtestTupleId', None, None, ), # 6
    (7, TType.I64, 'mId', None, None, ), # 7
    (8, TType.I64, 'cpdId', None, None, ), # 8
    (9, TType.I64, 'omId', None, None, ), # 9
    (10, TType.I32, 'creativePackageType', None, None, ), # 10
  )

  def __init__(self, name=None, docId=None, creativeId=None, creativeType=None, advCreativeGid=None, abtestTupleId=None, mId=None, cpdId=None, omId=None, creativePackageType=None,):
    self.name = name
    self.docId = docId
    self.creativeId = creativeId
    self.creativeType = creativeType
    self.advCreativeGid = advCreativeGid
    self.abtestTupleId = abtestTupleId
    self.mId = mId
    self.cpdId = cpdId
    self.omId = omId
    self.creativePackageType = creativePackageType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.docId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.creativeId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.creativeType = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.advCreativeGid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.abtestTupleId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.mId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.cpdId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.omId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.creativePackageType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TemplateElement')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.docId is not None:
      oprot.writeFieldBegin('docId', TType.STRING, 2)
      oprot.writeString(self.docId)
      oprot.writeFieldEnd()
    if self.creativeId is not None:
      oprot.writeFieldBegin('creativeId', TType.I64, 3)
      oprot.writeI64(self.creativeId)
      oprot.writeFieldEnd()
    if self.creativeType is not None:
      oprot.writeFieldBegin('creativeType', TType.I64, 4)
      oprot.writeI64(self.creativeType)
      oprot.writeFieldEnd()
    if self.advCreativeGid is not None:
      oprot.writeFieldBegin('advCreativeGid', TType.I64, 5)
      oprot.writeI64(self.advCreativeGid)
      oprot.writeFieldEnd()
    if self.abtestTupleId is not None:
      oprot.writeFieldBegin('abtestTupleId', TType.I64, 6)
      oprot.writeI64(self.abtestTupleId)
      oprot.writeFieldEnd()
    if self.mId is not None:
      oprot.writeFieldBegin('mId', TType.I64, 7)
      oprot.writeI64(self.mId)
      oprot.writeFieldEnd()
    if self.cpdId is not None:
      oprot.writeFieldBegin('cpdId', TType.I64, 8)
      oprot.writeI64(self.cpdId)
      oprot.writeFieldEnd()
    if self.omId is not None:
      oprot.writeFieldBegin('omId', TType.I64, 9)
      oprot.writeI64(self.omId)
      oprot.writeFieldEnd()
    if self.creativePackageType is not None:
      oprot.writeFieldBegin('creativePackageType', TType.I32, 10)
      oprot.writeI32(self.creativePackageType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.docId is None:
      raise TProtocol.TProtocolException(message='Required field docId is unset!')
    if self.creativeId is None:
      raise TProtocol.TProtocolException(message='Required field creativeId is unset!')
    if self.creativeType is None:
      raise TProtocol.TProtocolException(message='Required field creativeType is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.docId)
    value = (value * 31) ^ hash(self.creativeId)
    value = (value * 31) ^ hash(self.creativeType)
    value = (value * 31) ^ hash(self.advCreativeGid)
    value = (value * 31) ^ hash(self.abtestTupleId)
    value = (value * 31) ^ hash(self.mId)
    value = (value * 31) ^ hash(self.cpdId)
    value = (value * 31) ^ hash(self.omId)
    value = (value * 31) ^ hash(self.creativePackageType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TemplateObj:
  """
  Attributes:
   - templateId
   - templateType
   - componentType
   - apiFramework
   - order
   - elementList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'templateId', None, None, ), # 1
    (2, TType.I32, 'templateType', None, None, ), # 2
    (3, TType.I32, 'componentType', None, None, ), # 3
    (4, TType.I32, 'apiFramework', None, None, ), # 4
    (5, TType.I32, 'order', None, None, ), # 5
    (6, TType.LIST, 'elementList', (TType.STRUCT,(TemplateElement, TemplateElement.thrift_spec)), None, ), # 6
  )

  def __init__(self, templateId=None, templateType=None, componentType=None, apiFramework=None, order=None, elementList=None,):
    self.templateId = templateId
    self.templateType = templateType
    self.componentType = componentType
    self.apiFramework = apiFramework
    self.order = order
    self.elementList = elementList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.templateId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.templateType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.componentType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.apiFramework = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.order = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.elementList = []
          (_etype182, _size179) = iprot.readListBegin()
          for _i183 in range(_size179):
            _elem184 = TemplateElement()
            _elem184.read(iprot)
            self.elementList.append(_elem184)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TemplateObj')
    if self.templateId is not None:
      oprot.writeFieldBegin('templateId', TType.I32, 1)
      oprot.writeI32(self.templateId)
      oprot.writeFieldEnd()
    if self.templateType is not None:
      oprot.writeFieldBegin('templateType', TType.I32, 2)
      oprot.writeI32(self.templateType)
      oprot.writeFieldEnd()
    if self.componentType is not None:
      oprot.writeFieldBegin('componentType', TType.I32, 3)
      oprot.writeI32(self.componentType)
      oprot.writeFieldEnd()
    if self.apiFramework is not None:
      oprot.writeFieldBegin('apiFramework', TType.I32, 4)
      oprot.writeI32(self.apiFramework)
      oprot.writeFieldEnd()
    if self.order is not None:
      oprot.writeFieldBegin('order', TType.I32, 5)
      oprot.writeI32(self.order)
      oprot.writeFieldEnd()
    if self.elementList is not None:
      oprot.writeFieldBegin('elementList', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.elementList))
      for iter185 in self.elementList:
        iter185.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.templateId is None:
      raise TProtocol.TProtocolException(message='Required field templateId is unset!')
    if self.templateType is None:
      raise TProtocol.TProtocolException(message='Required field templateType is unset!')
    if self.componentType is None:
      raise TProtocol.TProtocolException(message='Required field componentType is unset!')
    if self.apiFramework is None:
      raise TProtocol.TProtocolException(message='Required field apiFramework is unset!')
    if self.order is None:
      raise TProtocol.TProtocolException(message='Required field order is unset!')
    if self.elementList is None:
      raise TProtocol.TProtocolException(message='Required field elementList is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.templateId)
    value = (value * 31) ^ hash(self.templateType)
    value = (value * 31) ^ hash(self.componentType)
    value = (value * 31) ^ hash(self.apiFramework)
    value = (value * 31) ^ hash(self.order)
    value = (value * 31) ^ hash(self.elementList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Campaign:
  """
  Attributes:
   - campaignId
   - adSource
   - adTemplate
   - imageSizeId
   - preclick
   - offerType
   - btType
   - creativeId
   - creativeTypeIdMap
   - adElementTemplate
   - downloadtest
   - creativeId2
   - creativeTypeIdMap2
   - dynamicCreative
   - playable
   - endcardUrl
   - extPlayable
   - videoEndType
   - orientation
   - usageVideo
   - templateGroup
   - videoTemplateId
   - endCardTemplateId
   - miniCardTemplateId
   - bidPrice
   - rankType
   - useAlgoPrice
   - algoPriceIn
   - algoPriceOut
   - creativeDataList
   - asAbTestTag
   - slotIndex
   - templateTypeGroup
   - templateObjList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'campaignId', None, None, ), # 1
    (2, TType.I32, 'adSource', None, None, ), # 2
    (3, TType.I32, 'adTemplate', None, None, ), # 3
    (4, TType.I32, 'imageSizeId', None, None, ), # 4
    (5, TType.I32, 'preclick', None, None, ), # 5
    (6, TType.I32, 'offerType', None, None, ), # 6
    (7, TType.I32, 'btType', None, None, ), # 7
    (8, TType.STRING, 'creativeId', None, None, ), # 8
    (9, TType.MAP, 'creativeTypeIdMap', (TType.I32,None,TType.I64,None), None, ), # 9
    (10, TType.I32, 'adElementTemplate', None, None, ), # 10
    (11, TType.I32, 'downloadtest', None, None, ), # 11
    (12, TType.STRING, 'creativeId2', None, None, ), # 12
    (13, TType.MAP, 'creativeTypeIdMap2', (TType.I32,None,TType.I64,None), None, ), # 13
    (14, TType.MAP, 'dynamicCreative', (TType.I32,None,TType.STRING,None), None, ), # 14
    (15, TType.BOOL, 'playable', None, False, ), # 15
    (16, TType.STRING, 'endcardUrl', None, None, ), # 16
    (17, TType.I32, 'extPlayable', None, None, ), # 17
    (18, TType.I32, 'videoEndType', None, None, ), # 18
    (19, TType.I32, 'orientation', None, None, ), # 19
    (20, TType.BOOL, 'usageVideo', None, None, ), # 20
    (21, TType.I32, 'templateGroup', None, None, ), # 21
    (22, TType.I32, 'videoTemplateId', None, None, ), # 22
    (23, TType.I32, 'endCardTemplateId', None, None, ), # 23
    (24, TType.I32, 'miniCardTemplateId', None, None, ), # 24
    (25, TType.DOUBLE, 'bidPrice', None, None, ), # 25
    (26, TType.I32, 'rankType', None, None, ), # 26
    (27, TType.BOOL, 'useAlgoPrice', None, None, ), # 27
    (28, TType.DOUBLE, 'algoPriceIn', None, None, ), # 28
    (29, TType.DOUBLE, 'algoPriceOut', None, None, ), # 29
    (30, TType.LIST, 'creativeDataList', (TType.STRUCT,(CreativeData, CreativeData.thrift_spec)), None, ), # 30
    (31, TType.STRING, 'asAbTestTag', None, None, ), # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    None, # 131
    None, # 132
    None, # 133
    None, # 134
    None, # 135
    None, # 136
    None, # 137
    None, # 138
    None, # 139
    None, # 140
    None, # 141
    None, # 142
    None, # 143
    None, # 144
    None, # 145
    None, # 146
    None, # 147
    None, # 148
    None, # 149
    None, # 150
    None, # 151
    None, # 152
    None, # 153
    None, # 154
    None, # 155
    None, # 156
    None, # 157
    None, # 158
    None, # 159
    None, # 160
    None, # 161
    None, # 162
    None, # 163
    None, # 164
    None, # 165
    None, # 166
    None, # 167
    None, # 168
    None, # 169
    None, # 170
    None, # 171
    None, # 172
    None, # 173
    None, # 174
    None, # 175
    None, # 176
    None, # 177
    None, # 178
    None, # 179
    None, # 180
    None, # 181
    None, # 182
    None, # 183
    None, # 184
    None, # 185
    None, # 186
    None, # 187
    None, # 188
    None, # 189
    None, # 190
    None, # 191
    None, # 192
    None, # 193
    None, # 194
    None, # 195
    None, # 196
    None, # 197
    None, # 198
    None, # 199
    (200, TType.I32, 'slotIndex', None, None, ), # 200
    (201, TType.I32, 'templateTypeGroup', None, None, ), # 201
    (202, TType.LIST, 'templateObjList', (TType.STRUCT,(TemplateObj, TemplateObj.thrift_spec)), None, ), # 202
  )

  def __init__(self, campaignId=None, adSource=None, adTemplate=None, imageSizeId=None, preclick=None, offerType=None, btType=None, creativeId=None, creativeTypeIdMap=None, adElementTemplate=None, downloadtest=None, creativeId2=None, creativeTypeIdMap2=None, dynamicCreative=None, playable=thrift_spec[15][4], endcardUrl=None, extPlayable=None, videoEndType=None, orientation=None, usageVideo=None, templateGroup=None, videoTemplateId=None, endCardTemplateId=None, miniCardTemplateId=None, bidPrice=None, rankType=None, useAlgoPrice=None, algoPriceIn=None, algoPriceOut=None, creativeDataList=None, asAbTestTag=None, slotIndex=None, templateTypeGroup=None, templateObjList=None,):
    self.campaignId = campaignId
    self.adSource = adSource
    self.adTemplate = adTemplate
    self.imageSizeId = imageSizeId
    self.preclick = preclick
    self.offerType = offerType
    self.btType = btType
    self.creativeId = creativeId
    self.creativeTypeIdMap = creativeTypeIdMap
    self.adElementTemplate = adElementTemplate
    self.downloadtest = downloadtest
    self.creativeId2 = creativeId2
    self.creativeTypeIdMap2 = creativeTypeIdMap2
    self.dynamicCreative = dynamicCreative
    self.playable = playable
    self.endcardUrl = endcardUrl
    self.extPlayable = extPlayable
    self.videoEndType = videoEndType
    self.orientation = orientation
    self.usageVideo = usageVideo
    self.templateGroup = templateGroup
    self.videoTemplateId = videoTemplateId
    self.endCardTemplateId = endCardTemplateId
    self.miniCardTemplateId = miniCardTemplateId
    self.bidPrice = bidPrice
    self.rankType = rankType
    self.useAlgoPrice = useAlgoPrice
    self.algoPriceIn = algoPriceIn
    self.algoPriceOut = algoPriceOut
    self.creativeDataList = creativeDataList
    self.asAbTestTag = asAbTestTag
    self.slotIndex = slotIndex
    self.templateTypeGroup = templateTypeGroup
    self.templateObjList = templateObjList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.campaignId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.adSource = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.adTemplate = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.imageSizeId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.preclick = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.offerType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.btType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.creativeId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.creativeTypeIdMap = {}
          (_ktype187, _vtype188, _size186 ) = iprot.readMapBegin()
          for _i190 in range(_size186):
            _key191 = iprot.readI32()
            _val192 = iprot.readI64()
            self.creativeTypeIdMap[_key191] = _val192
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.adElementTemplate = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.downloadtest = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.creativeId2 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.MAP:
          self.creativeTypeIdMap2 = {}
          (_ktype194, _vtype195, _size193 ) = iprot.readMapBegin()
          for _i197 in range(_size193):
            _key198 = iprot.readI32()
            _val199 = iprot.readI64()
            self.creativeTypeIdMap2[_key198] = _val199
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.MAP:
          self.dynamicCreative = {}
          (_ktype201, _vtype202, _size200 ) = iprot.readMapBegin()
          for _i204 in range(_size200):
            _key205 = iprot.readI32()
            _val206 = iprot.readString()
            self.dynamicCreative[_key205] = _val206
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.playable = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.endcardUrl = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.extPlayable = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.videoEndType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.orientation = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.usageVideo = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.templateGroup = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.videoTemplateId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.endCardTemplateId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.miniCardTemplateId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.DOUBLE:
          self.bidPrice = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.rankType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.BOOL:
          self.useAlgoPrice = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.DOUBLE:
          self.algoPriceIn = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.DOUBLE:
          self.algoPriceOut = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.LIST:
          self.creativeDataList = []
          (_etype210, _size207) = iprot.readListBegin()
          for _i211 in range(_size207):
            _elem212 = CreativeData()
            _elem212.read(iprot)
            self.creativeDataList.append(_elem212)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.asAbTestTag = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 200:
        if ftype == TType.I32:
          self.slotIndex = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 201:
        if ftype == TType.I32:
          self.templateTypeGroup = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 202:
        if ftype == TType.LIST:
          self.templateObjList = []
          (_etype216, _size213) = iprot.readListBegin()
          for _i217 in range(_size213):
            _elem218 = TemplateObj()
            _elem218.read(iprot)
            self.templateObjList.append(_elem218)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Campaign')
    if self.campaignId is not None:
      oprot.writeFieldBegin('campaignId', TType.I64, 1)
      oprot.writeI64(self.campaignId)
      oprot.writeFieldEnd()
    if self.adSource is not None:
      oprot.writeFieldBegin('adSource', TType.I32, 2)
      oprot.writeI32(self.adSource)
      oprot.writeFieldEnd()
    if self.adTemplate is not None:
      oprot.writeFieldBegin('adTemplate', TType.I32, 3)
      oprot.writeI32(self.adTemplate)
      oprot.writeFieldEnd()
    if self.imageSizeId is not None:
      oprot.writeFieldBegin('imageSizeId', TType.I32, 4)
      oprot.writeI32(self.imageSizeId)
      oprot.writeFieldEnd()
    if self.preclick is not None:
      oprot.writeFieldBegin('preclick', TType.I32, 5)
      oprot.writeI32(self.preclick)
      oprot.writeFieldEnd()
    if self.offerType is not None:
      oprot.writeFieldBegin('offerType', TType.I32, 6)
      oprot.writeI32(self.offerType)
      oprot.writeFieldEnd()
    if self.btType is not None:
      oprot.writeFieldBegin('btType', TType.I32, 7)
      oprot.writeI32(self.btType)
      oprot.writeFieldEnd()
    if self.creativeId is not None:
      oprot.writeFieldBegin('creativeId', TType.STRING, 8)
      oprot.writeString(self.creativeId)
      oprot.writeFieldEnd()
    if self.creativeTypeIdMap is not None:
      oprot.writeFieldBegin('creativeTypeIdMap', TType.MAP, 9)
      oprot.writeMapBegin(TType.I32, TType.I64, len(self.creativeTypeIdMap))
      for kiter219,viter220 in self.creativeTypeIdMap.items():
        oprot.writeI32(kiter219)
        oprot.writeI64(viter220)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.adElementTemplate is not None:
      oprot.writeFieldBegin('adElementTemplate', TType.I32, 10)
      oprot.writeI32(self.adElementTemplate)
      oprot.writeFieldEnd()
    if self.downloadtest is not None:
      oprot.writeFieldBegin('downloadtest', TType.I32, 11)
      oprot.writeI32(self.downloadtest)
      oprot.writeFieldEnd()
    if self.creativeId2 is not None:
      oprot.writeFieldBegin('creativeId2', TType.STRING, 12)
      oprot.writeString(self.creativeId2)
      oprot.writeFieldEnd()
    if self.creativeTypeIdMap2 is not None:
      oprot.writeFieldBegin('creativeTypeIdMap2', TType.MAP, 13)
      oprot.writeMapBegin(TType.I32, TType.I64, len(self.creativeTypeIdMap2))
      for kiter221,viter222 in self.creativeTypeIdMap2.items():
        oprot.writeI32(kiter221)
        oprot.writeI64(viter222)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.dynamicCreative is not None:
      oprot.writeFieldBegin('dynamicCreative', TType.MAP, 14)
      oprot.writeMapBegin(TType.I32, TType.STRING, len(self.dynamicCreative))
      for kiter223,viter224 in self.dynamicCreative.items():
        oprot.writeI32(kiter223)
        oprot.writeString(viter224)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.playable is not None:
      oprot.writeFieldBegin('playable', TType.BOOL, 15)
      oprot.writeBool(self.playable)
      oprot.writeFieldEnd()
    if self.endcardUrl is not None:
      oprot.writeFieldBegin('endcardUrl', TType.STRING, 16)
      oprot.writeString(self.endcardUrl)
      oprot.writeFieldEnd()
    if self.extPlayable is not None:
      oprot.writeFieldBegin('extPlayable', TType.I32, 17)
      oprot.writeI32(self.extPlayable)
      oprot.writeFieldEnd()
    if self.videoEndType is not None:
      oprot.writeFieldBegin('videoEndType', TType.I32, 18)
      oprot.writeI32(self.videoEndType)
      oprot.writeFieldEnd()
    if self.orientation is not None:
      oprot.writeFieldBegin('orientation', TType.I32, 19)
      oprot.writeI32(self.orientation)
      oprot.writeFieldEnd()
    if self.usageVideo is not None:
      oprot.writeFieldBegin('usageVideo', TType.BOOL, 20)
      oprot.writeBool(self.usageVideo)
      oprot.writeFieldEnd()
    if self.templateGroup is not None:
      oprot.writeFieldBegin('templateGroup', TType.I32, 21)
      oprot.writeI32(self.templateGroup)
      oprot.writeFieldEnd()
    if self.videoTemplateId is not None:
      oprot.writeFieldBegin('videoTemplateId', TType.I32, 22)
      oprot.writeI32(self.videoTemplateId)
      oprot.writeFieldEnd()
    if self.endCardTemplateId is not None:
      oprot.writeFieldBegin('endCardTemplateId', TType.I32, 23)
      oprot.writeI32(self.endCardTemplateId)
      oprot.writeFieldEnd()
    if self.miniCardTemplateId is not None:
      oprot.writeFieldBegin('miniCardTemplateId', TType.I32, 24)
      oprot.writeI32(self.miniCardTemplateId)
      oprot.writeFieldEnd()
    if self.bidPrice is not None:
      oprot.writeFieldBegin('bidPrice', TType.DOUBLE, 25)
      oprot.writeDouble(self.bidPrice)
      oprot.writeFieldEnd()
    if self.rankType is not None:
      oprot.writeFieldBegin('rankType', TType.I32, 26)
      oprot.writeI32(self.rankType)
      oprot.writeFieldEnd()
    if self.useAlgoPrice is not None:
      oprot.writeFieldBegin('useAlgoPrice', TType.BOOL, 27)
      oprot.writeBool(self.useAlgoPrice)
      oprot.writeFieldEnd()
    if self.algoPriceIn is not None:
      oprot.writeFieldBegin('algoPriceIn', TType.DOUBLE, 28)
      oprot.writeDouble(self.algoPriceIn)
      oprot.writeFieldEnd()
    if self.algoPriceOut is not None:
      oprot.writeFieldBegin('algoPriceOut', TType.DOUBLE, 29)
      oprot.writeDouble(self.algoPriceOut)
      oprot.writeFieldEnd()
    if self.creativeDataList is not None:
      oprot.writeFieldBegin('creativeDataList', TType.LIST, 30)
      oprot.writeListBegin(TType.STRUCT, len(self.creativeDataList))
      for iter225 in self.creativeDataList:
        iter225.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.asAbTestTag is not None:
      oprot.writeFieldBegin('asAbTestTag', TType.STRING, 31)
      oprot.writeString(self.asAbTestTag)
      oprot.writeFieldEnd()
    if self.slotIndex is not None:
      oprot.writeFieldBegin('slotIndex', TType.I32, 200)
      oprot.writeI32(self.slotIndex)
      oprot.writeFieldEnd()
    if self.templateTypeGroup is not None:
      oprot.writeFieldBegin('templateTypeGroup', TType.I32, 201)
      oprot.writeI32(self.templateTypeGroup)
      oprot.writeFieldEnd()
    if self.templateObjList is not None:
      oprot.writeFieldBegin('templateObjList', TType.LIST, 202)
      oprot.writeListBegin(TType.STRUCT, len(self.templateObjList))
      for iter226 in self.templateObjList:
        iter226.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.campaignId is None:
      raise TProtocol.TProtocolException(message='Required field campaignId is unset!')
    if self.adSource is None:
      raise TProtocol.TProtocolException(message='Required field adSource is unset!')
    if self.imageSizeId is None:
      raise TProtocol.TProtocolException(message='Required field imageSizeId is unset!')
    if self.btType is None:
      raise TProtocol.TProtocolException(message='Required field btType is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.campaignId)
    value = (value * 31) ^ hash(self.adSource)
    value = (value * 31) ^ hash(self.adTemplate)
    value = (value * 31) ^ hash(self.imageSizeId)
    value = (value * 31) ^ hash(self.preclick)
    value = (value * 31) ^ hash(self.offerType)
    value = (value * 31) ^ hash(self.btType)
    value = (value * 31) ^ hash(self.creativeId)
    value = (value * 31) ^ hash(self.creativeTypeIdMap)
    value = (value * 31) ^ hash(self.adElementTemplate)
    value = (value * 31) ^ hash(self.downloadtest)
    value = (value * 31) ^ hash(self.creativeId2)
    value = (value * 31) ^ hash(self.creativeTypeIdMap2)
    value = (value * 31) ^ hash(self.dynamicCreative)
    value = (value * 31) ^ hash(self.playable)
    value = (value * 31) ^ hash(self.endcardUrl)
    value = (value * 31) ^ hash(self.extPlayable)
    value = (value * 31) ^ hash(self.videoEndType)
    value = (value * 31) ^ hash(self.orientation)
    value = (value * 31) ^ hash(self.usageVideo)
    value = (value * 31) ^ hash(self.templateGroup)
    value = (value * 31) ^ hash(self.videoTemplateId)
    value = (value * 31) ^ hash(self.endCardTemplateId)
    value = (value * 31) ^ hash(self.miniCardTemplateId)
    value = (value * 31) ^ hash(self.bidPrice)
    value = (value * 31) ^ hash(self.rankType)
    value = (value * 31) ^ hash(self.useAlgoPrice)
    value = (value * 31) ^ hash(self.algoPriceIn)
    value = (value * 31) ^ hash(self.algoPriceOut)
    value = (value * 31) ^ hash(self.creativeDataList)
    value = (value * 31) ^ hash(self.asAbTestTag)
    value = (value * 31) ^ hash(self.slotIndex)
    value = (value * 31) ^ hash(self.templateTypeGroup)
    value = (value * 31) ^ hash(self.templateObjList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BigTemplate:
  """
  Attributes:
   - bigTemplateId
   - slotIndexCampaignIdMap
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'bigTemplateId', None, None, ), # 1
    (2, TType.MAP, 'slotIndexCampaignIdMap', (TType.I32,None,TType.I64,None), None, ), # 2
  )

  def __init__(self, bigTemplateId=None, slotIndexCampaignIdMap=None,):
    self.bigTemplateId = bigTemplateId
    self.slotIndexCampaignIdMap = slotIndexCampaignIdMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.bigTemplateId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.slotIndexCampaignIdMap = {}
          (_ktype228, _vtype229, _size227 ) = iprot.readMapBegin()
          for _i231 in range(_size227):
            _key232 = iprot.readI32()
            _val233 = iprot.readI64()
            self.slotIndexCampaignIdMap[_key232] = _val233
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BigTemplate')
    if self.bigTemplateId is not None:
      oprot.writeFieldBegin('bigTemplateId', TType.I32, 1)
      oprot.writeI32(self.bigTemplateId)
      oprot.writeFieldEnd()
    if self.slotIndexCampaignIdMap is not None:
      oprot.writeFieldBegin('slotIndexCampaignIdMap', TType.MAP, 2)
      oprot.writeMapBegin(TType.I32, TType.I64, len(self.slotIndexCampaignIdMap))
      for kiter234,viter235 in self.slotIndexCampaignIdMap.items():
        oprot.writeI32(kiter234)
        oprot.writeI64(viter235)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.bigTemplateId is None:
      raise TProtocol.TProtocolException(message='Required field bigTemplateId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bigTemplateId)
    value = (value * 31) ^ hash(self.slotIndexCampaignIdMap)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryResult:
  """
  Attributes:
   - campaign_list
   - strategy
   - logId
   - runTimeVariables
   - adTemplate
   - noneResultReason
   - filterReason
   - algoFeatInfo
   - ifLowerImp
   - debugInfo
   - resourceType
   - endScreenTemplateId
   - bigTemplateInfo
   - ecpmFloor
   - extAdxAlgo
   - bidPrice
   - bigTemplateId
   - filterByCap903CampaignList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'campaign_list', (TType.STRUCT,(Campaign, Campaign.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'strategy', None, None, ), # 2
    (3, TType.STRING, 'logId', None, None, ), # 3
    (4, TType.STRUCT, 'runTimeVariables', (RunTimeVariable, RunTimeVariable.thrift_spec), None, ), # 4
    (5, TType.I32, 'adTemplate', None, None, ), # 5
    (6, TType.I32, 'noneResultReason', None, None, ), # 6
    (7, TType.LIST, 'filterReason', (TType.STRUCT,(FilterReason, FilterReason.thrift_spec)), None, ), # 7
    (8, TType.STRING, 'algoFeatInfo', None, None, ), # 8
    (9, TType.I32, 'ifLowerImp', None, None, ), # 9
    (10, TType.LIST, 'debugInfo', (TType.STRING,None), None, ), # 10
    (11, TType.I32, 'resourceType', None, None, ), # 11
    (12, TType.I32, 'endScreenTemplateId', None, None, ), # 12
    (13, TType.STRUCT, 'bigTemplateInfo', (BigTemplate, BigTemplate.thrift_spec), None, ), # 13
    (14, TType.DOUBLE, 'ecpmFloor', None, None, ), # 14
    (15, TType.STRING, 'extAdxAlgo', None, None, ), # 15
    (16, TType.DOUBLE, 'bidPrice', None, None, ), # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    None, # 131
    None, # 132
    None, # 133
    None, # 134
    None, # 135
    None, # 136
    None, # 137
    None, # 138
    None, # 139
    None, # 140
    None, # 141
    None, # 142
    None, # 143
    None, # 144
    None, # 145
    None, # 146
    None, # 147
    None, # 148
    None, # 149
    None, # 150
    None, # 151
    None, # 152
    None, # 153
    None, # 154
    None, # 155
    None, # 156
    None, # 157
    None, # 158
    None, # 159
    None, # 160
    None, # 161
    None, # 162
    None, # 163
    None, # 164
    None, # 165
    None, # 166
    None, # 167
    None, # 168
    None, # 169
    None, # 170
    None, # 171
    None, # 172
    None, # 173
    None, # 174
    None, # 175
    None, # 176
    None, # 177
    None, # 178
    None, # 179
    None, # 180
    None, # 181
    None, # 182
    None, # 183
    None, # 184
    None, # 185
    None, # 186
    None, # 187
    None, # 188
    None, # 189
    None, # 190
    None, # 191
    None, # 192
    None, # 193
    None, # 194
    None, # 195
    None, # 196
    None, # 197
    None, # 198
    None, # 199
    (200, TType.I32, 'bigTemplateId', None, None, ), # 200
    None, # 201
    None, # 202
    None, # 203
    None, # 204
    None, # 205
    None, # 206
    None, # 207
    None, # 208
    None, # 209
    None, # 210
    None, # 211
    None, # 212
    None, # 213
    None, # 214
    None, # 215
    None, # 216
    None, # 217
    None, # 218
    None, # 219
    None, # 220
    None, # 221
    None, # 222
    None, # 223
    None, # 224
    None, # 225
    None, # 226
    None, # 227
    None, # 228
    None, # 229
    None, # 230
    None, # 231
    None, # 232
    None, # 233
    None, # 234
    None, # 235
    None, # 236
    None, # 237
    None, # 238
    None, # 239
    None, # 240
    None, # 241
    None, # 242
    None, # 243
    None, # 244
    None, # 245
    None, # 246
    None, # 247
    None, # 248
    None, # 249
    None, # 250
    None, # 251
    None, # 252
    None, # 253
    None, # 254
    None, # 255
    None, # 256
    None, # 257
    None, # 258
    None, # 259
    None, # 260
    None, # 261
    None, # 262
    None, # 263
    None, # 264
    None, # 265
    None, # 266
    None, # 267
    None, # 268
    None, # 269
    None, # 270
    None, # 271
    None, # 272
    None, # 273
    None, # 274
    None, # 275
    None, # 276
    None, # 277
    None, # 278
    None, # 279
    None, # 280
    None, # 281
    None, # 282
    None, # 283
    None, # 284
    None, # 285
    None, # 286
    None, # 287
    None, # 288
    None, # 289
    None, # 290
    None, # 291
    None, # 292
    None, # 293
    None, # 294
    None, # 295
    None, # 296
    None, # 297
    None, # 298
    None, # 299
    None, # 300
    None, # 301
    None, # 302
    None, # 303
    None, # 304
    None, # 305
    None, # 306
    None, # 307
    None, # 308
    None, # 309
    None, # 310
    None, # 311
    None, # 312
    None, # 313
    None, # 314
    None, # 315
    None, # 316
    None, # 317
    None, # 318
    None, # 319
    None, # 320
    None, # 321
    None, # 322
    None, # 323
    None, # 324
    None, # 325
    None, # 326
    None, # 327
    None, # 328
    None, # 329
    None, # 330
    None, # 331
    None, # 332
    None, # 333
    None, # 334
    None, # 335
    None, # 336
    None, # 337
    None, # 338
    None, # 339
    None, # 340
    None, # 341
    None, # 342
    None, # 343
    None, # 344
    None, # 345
    None, # 346
    None, # 347
    None, # 348
    None, # 349
    None, # 350
    None, # 351
    None, # 352
    None, # 353
    None, # 354
    None, # 355
    None, # 356
    None, # 357
    None, # 358
    None, # 359
    None, # 360
    None, # 361
    None, # 362
    None, # 363
    None, # 364
    None, # 365
    None, # 366
    None, # 367
    None, # 368
    None, # 369
    None, # 370
    None, # 371
    None, # 372
    None, # 373
    None, # 374
    None, # 375
    None, # 376
    None, # 377
    None, # 378
    None, # 379
    None, # 380
    None, # 381
    None, # 382
    None, # 383
    None, # 384
    None, # 385
    None, # 386
    None, # 387
    None, # 388
    None, # 389
    None, # 390
    None, # 391
    None, # 392
    None, # 393
    None, # 394
    None, # 395
    None, # 396
    None, # 397
    None, # 398
    None, # 399
    None, # 400
    None, # 401
    None, # 402
    None, # 403
    None, # 404
    None, # 405
    None, # 406
    None, # 407
    None, # 408
    None, # 409
    None, # 410
    None, # 411
    None, # 412
    None, # 413
    None, # 414
    None, # 415
    None, # 416
    None, # 417
    None, # 418
    None, # 419
    None, # 420
    None, # 421
    None, # 422
    None, # 423
    None, # 424
    None, # 425
    None, # 426
    None, # 427
    None, # 428
    None, # 429
    None, # 430
    None, # 431
    None, # 432
    None, # 433
    None, # 434
    None, # 435
    None, # 436
    None, # 437
    None, # 438
    None, # 439
    None, # 440
    None, # 441
    None, # 442
    None, # 443
    None, # 444
    None, # 445
    None, # 446
    None, # 447
    None, # 448
    None, # 449
    None, # 450
    None, # 451
    None, # 452
    None, # 453
    None, # 454
    None, # 455
    None, # 456
    None, # 457
    None, # 458
    None, # 459
    None, # 460
    None, # 461
    None, # 462
    None, # 463
    None, # 464
    None, # 465
    None, # 466
    None, # 467
    None, # 468
    None, # 469
    None, # 470
    None, # 471
    None, # 472
    None, # 473
    None, # 474
    None, # 475
    None, # 476
    None, # 477
    None, # 478
    None, # 479
    None, # 480
    None, # 481
    None, # 482
    None, # 483
    None, # 484
    None, # 485
    None, # 486
    None, # 487
    None, # 488
    None, # 489
    None, # 490
    None, # 491
    None, # 492
    None, # 493
    None, # 494
    None, # 495
    None, # 496
    None, # 497
    None, # 498
    None, # 499
    None, # 500
    None, # 501
    None, # 502
    None, # 503
    None, # 504
    None, # 505
    None, # 506
    None, # 507
    None, # 508
    None, # 509
    None, # 510
    None, # 511
    None, # 512
    None, # 513
    None, # 514
    None, # 515
    None, # 516
    None, # 517
    None, # 518
    None, # 519
    None, # 520
    None, # 521
    None, # 522
    None, # 523
    None, # 524
    None, # 525
    None, # 526
    None, # 527
    None, # 528
    None, # 529
    None, # 530
    None, # 531
    None, # 532
    None, # 533
    None, # 534
    None, # 535
    None, # 536
    None, # 537
    None, # 538
    None, # 539
    None, # 540
    None, # 541
    None, # 542
    None, # 543
    None, # 544
    None, # 545
    None, # 546
    None, # 547
    None, # 548
    None, # 549
    None, # 550
    None, # 551
    None, # 552
    None, # 553
    None, # 554
    None, # 555
    None, # 556
    None, # 557
    None, # 558
    None, # 559
    None, # 560
    None, # 561
    None, # 562
    None, # 563
    None, # 564
    None, # 565
    None, # 566
    None, # 567
    None, # 568
    None, # 569
    None, # 570
    None, # 571
    None, # 572
    None, # 573
    None, # 574
    None, # 575
    None, # 576
    None, # 577
    None, # 578
    None, # 579
    None, # 580
    None, # 581
    None, # 582
    None, # 583
    None, # 584
    None, # 585
    None, # 586
    None, # 587
    None, # 588
    None, # 589
    None, # 590
    None, # 591
    None, # 592
    None, # 593
    None, # 594
    None, # 595
    None, # 596
    None, # 597
    None, # 598
    None, # 599
    None, # 600
    None, # 601
    None, # 602
    None, # 603
    None, # 604
    None, # 605
    None, # 606
    None, # 607
    None, # 608
    None, # 609
    None, # 610
    None, # 611
    None, # 612
    None, # 613
    None, # 614
    None, # 615
    None, # 616
    None, # 617
    None, # 618
    None, # 619
    None, # 620
    None, # 621
    None, # 622
    None, # 623
    None, # 624
    None, # 625
    None, # 626
    None, # 627
    None, # 628
    None, # 629
    None, # 630
    None, # 631
    None, # 632
    None, # 633
    None, # 634
    None, # 635
    None, # 636
    None, # 637
    None, # 638
    None, # 639
    None, # 640
    None, # 641
    None, # 642
    None, # 643
    None, # 644
    None, # 645
    None, # 646
    None, # 647
    None, # 648
    None, # 649
    None, # 650
    None, # 651
    None, # 652
    None, # 653
    None, # 654
    None, # 655
    None, # 656
    None, # 657
    None, # 658
    None, # 659
    None, # 660
    None, # 661
    None, # 662
    None, # 663
    None, # 664
    None, # 665
    None, # 666
    None, # 667
    None, # 668
    None, # 669
    None, # 670
    None, # 671
    None, # 672
    None, # 673
    None, # 674
    None, # 675
    None, # 676
    None, # 677
    None, # 678
    None, # 679
    None, # 680
    None, # 681
    None, # 682
    None, # 683
    None, # 684
    None, # 685
    None, # 686
    None, # 687
    None, # 688
    None, # 689
    None, # 690
    None, # 691
    None, # 692
    None, # 693
    None, # 694
    None, # 695
    None, # 696
    None, # 697
    None, # 698
    None, # 699
    None, # 700
    None, # 701
    None, # 702
    None, # 703
    None, # 704
    None, # 705
    None, # 706
    None, # 707
    None, # 708
    None, # 709
    None, # 710
    None, # 711
    None, # 712
    None, # 713
    None, # 714
    None, # 715
    None, # 716
    None, # 717
    None, # 718
    None, # 719
    None, # 720
    None, # 721
    None, # 722
    None, # 723
    None, # 724
    None, # 725
    None, # 726
    None, # 727
    None, # 728
    None, # 729
    None, # 730
    None, # 731
    None, # 732
    None, # 733
    None, # 734
    None, # 735
    None, # 736
    None, # 737
    None, # 738
    None, # 739
    None, # 740
    None, # 741
    None, # 742
    None, # 743
    None, # 744
    None, # 745
    None, # 746
    None, # 747
    None, # 748
    None, # 749
    None, # 750
    None, # 751
    None, # 752
    None, # 753
    None, # 754
    None, # 755
    None, # 756
    None, # 757
    None, # 758
    None, # 759
    None, # 760
    None, # 761
    None, # 762
    None, # 763
    None, # 764
    None, # 765
    None, # 766
    None, # 767
    None, # 768
    None, # 769
    None, # 770
    None, # 771
    None, # 772
    None, # 773
    None, # 774
    None, # 775
    None, # 776
    None, # 777
    None, # 778
    None, # 779
    None, # 780
    None, # 781
    None, # 782
    None, # 783
    None, # 784
    None, # 785
    None, # 786
    None, # 787
    None, # 788
    None, # 789
    None, # 790
    None, # 791
    None, # 792
    None, # 793
    None, # 794
    None, # 795
    None, # 796
    None, # 797
    None, # 798
    None, # 799
    (800, TType.LIST, 'filterByCap903CampaignList', (TType.STRUCT,(Campaign, Campaign.thrift_spec)), None, ), # 800
  )

  def __init__(self, campaign_list=None, strategy=None, logId=None, runTimeVariables=None, adTemplate=None, noneResultReason=None, filterReason=None, algoFeatInfo=None, ifLowerImp=None, debugInfo=None, resourceType=None, endScreenTemplateId=None, bigTemplateInfo=None, ecpmFloor=None, extAdxAlgo=None, bidPrice=None, bigTemplateId=None, filterByCap903CampaignList=None,):
    self.campaign_list = campaign_list
    self.strategy = strategy
    self.logId = logId
    self.runTimeVariables = runTimeVariables
    self.adTemplate = adTemplate
    self.noneResultReason = noneResultReason
    self.filterReason = filterReason
    self.algoFeatInfo = algoFeatInfo
    self.ifLowerImp = ifLowerImp
    self.debugInfo = debugInfo
    self.resourceType = resourceType
    self.endScreenTemplateId = endScreenTemplateId
    self.bigTemplateInfo = bigTemplateInfo
    self.ecpmFloor = ecpmFloor
    self.extAdxAlgo = extAdxAlgo
    self.bidPrice = bidPrice
    self.bigTemplateId = bigTemplateId
    self.filterByCap903CampaignList = filterByCap903CampaignList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.campaign_list = []
          (_etype239, _size236) = iprot.readListBegin()
          for _i240 in range(_size236):
            _elem241 = Campaign()
            _elem241.read(iprot)
            self.campaign_list.append(_elem241)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.strategy = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.logId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.runTimeVariables = RunTimeVariable()
          self.runTimeVariables.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.adTemplate = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.noneResultReason = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.filterReason = []
          (_etype245, _size242) = iprot.readListBegin()
          for _i246 in range(_size242):
            _elem247 = FilterReason()
            _elem247.read(iprot)
            self.filterReason.append(_elem247)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.algoFeatInfo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.ifLowerImp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.debugInfo = []
          (_etype251, _size248) = iprot.readListBegin()
          for _i252 in range(_size248):
            _elem253 = iprot.readString()
            self.debugInfo.append(_elem253)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.resourceType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.endScreenTemplateId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.bigTemplateInfo = BigTemplate()
          self.bigTemplateInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.ecpmFloor = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.extAdxAlgo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.bidPrice = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 200:
        if ftype == TType.I32:
          self.bigTemplateId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 800:
        if ftype == TType.LIST:
          self.filterByCap903CampaignList = []
          (_etype257, _size254) = iprot.readListBegin()
          for _i258 in range(_size254):
            _elem259 = Campaign()
            _elem259.read(iprot)
            self.filterByCap903CampaignList.append(_elem259)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryResult')
    if self.campaign_list is not None:
      oprot.writeFieldBegin('campaign_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.campaign_list))
      for iter260 in self.campaign_list:
        iter260.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.strategy is not None:
      oprot.writeFieldBegin('strategy', TType.STRING, 2)
      oprot.writeString(self.strategy)
      oprot.writeFieldEnd()
    if self.logId is not None:
      oprot.writeFieldBegin('logId', TType.STRING, 3)
      oprot.writeString(self.logId)
      oprot.writeFieldEnd()
    if self.runTimeVariables is not None:
      oprot.writeFieldBegin('runTimeVariables', TType.STRUCT, 4)
      self.runTimeVariables.write(oprot)
      oprot.writeFieldEnd()
    if self.adTemplate is not None:
      oprot.writeFieldBegin('adTemplate', TType.I32, 5)
      oprot.writeI32(self.adTemplate)
      oprot.writeFieldEnd()
    if self.noneResultReason is not None:
      oprot.writeFieldBegin('noneResultReason', TType.I32, 6)
      oprot.writeI32(self.noneResultReason)
      oprot.writeFieldEnd()
    if self.filterReason is not None:
      oprot.writeFieldBegin('filterReason', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.filterReason))
      for iter261 in self.filterReason:
        iter261.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.algoFeatInfo is not None:
      oprot.writeFieldBegin('algoFeatInfo', TType.STRING, 8)
      oprot.writeString(self.algoFeatInfo)
      oprot.writeFieldEnd()
    if self.ifLowerImp is not None:
      oprot.writeFieldBegin('ifLowerImp', TType.I32, 9)
      oprot.writeI32(self.ifLowerImp)
      oprot.writeFieldEnd()
    if self.debugInfo is not None:
      oprot.writeFieldBegin('debugInfo', TType.LIST, 10)
      oprot.writeListBegin(TType.STRING, len(self.debugInfo))
      for iter262 in self.debugInfo:
        oprot.writeString(iter262)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.resourceType is not None:
      oprot.writeFieldBegin('resourceType', TType.I32, 11)
      oprot.writeI32(self.resourceType)
      oprot.writeFieldEnd()
    if self.endScreenTemplateId is not None:
      oprot.writeFieldBegin('endScreenTemplateId', TType.I32, 12)
      oprot.writeI32(self.endScreenTemplateId)
      oprot.writeFieldEnd()
    if self.bigTemplateInfo is not None:
      oprot.writeFieldBegin('bigTemplateInfo', TType.STRUCT, 13)
      self.bigTemplateInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.ecpmFloor is not None:
      oprot.writeFieldBegin('ecpmFloor', TType.DOUBLE, 14)
      oprot.writeDouble(self.ecpmFloor)
      oprot.writeFieldEnd()
    if self.extAdxAlgo is not None:
      oprot.writeFieldBegin('extAdxAlgo', TType.STRING, 15)
      oprot.writeString(self.extAdxAlgo)
      oprot.writeFieldEnd()
    if self.bidPrice is not None:
      oprot.writeFieldBegin('bidPrice', TType.DOUBLE, 16)
      oprot.writeDouble(self.bidPrice)
      oprot.writeFieldEnd()
    if self.bigTemplateId is not None:
      oprot.writeFieldBegin('bigTemplateId', TType.I32, 200)
      oprot.writeI32(self.bigTemplateId)
      oprot.writeFieldEnd()
    if self.filterByCap903CampaignList is not None:
      oprot.writeFieldBegin('filterByCap903CampaignList', TType.LIST, 800)
      oprot.writeListBegin(TType.STRUCT, len(self.filterByCap903CampaignList))
      for iter263 in self.filterByCap903CampaignList:
        iter263.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.campaign_list is None:
      raise TProtocol.TProtocolException(message='Required field campaign_list is unset!')
    if self.strategy is None:
      raise TProtocol.TProtocolException(message='Required field strategy is unset!')
    if self.logId is None:
      raise TProtocol.TProtocolException(message='Required field logId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.campaign_list)
    value = (value * 31) ^ hash(self.strategy)
    value = (value * 31) ^ hash(self.logId)
    value = (value * 31) ^ hash(self.runTimeVariables)
    value = (value * 31) ^ hash(self.adTemplate)
    value = (value * 31) ^ hash(self.noneResultReason)
    value = (value * 31) ^ hash(self.filterReason)
    value = (value * 31) ^ hash(self.algoFeatInfo)
    value = (value * 31) ^ hash(self.ifLowerImp)
    value = (value * 31) ^ hash(self.debugInfo)
    value = (value * 31) ^ hash(self.resourceType)
    value = (value * 31) ^ hash(self.endScreenTemplateId)
    value = (value * 31) ^ hash(self.bigTemplateInfo)
    value = (value * 31) ^ hash(self.ecpmFloor)
    value = (value * 31) ^ hash(self.extAdxAlgo)
    value = (value * 31) ^ hash(self.bidPrice)
    value = (value * 31) ^ hash(self.bigTemplateId)
    value = (value * 31) ^ hash(self.filterByCap903CampaignList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Status:
  """
  Attributes:
   - health
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'health', None, None, ), # 1
  )

  def __init__(self, health=None,):
    self.health = health

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.health = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Status')
    if self.health is not None:
      oprot.writeFieldBegin('health', TType.STRING, 1)
      oprot.writeString(self.health)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.health)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryFailureException(TException):
  """
  Attributes:
   - message
   - errorCode
   - requestId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.I32, 'errorCode', None, None, ), # 2
    (3, TType.STRING, 'requestId', None, None, ), # 3
  )

  def __init__(self, message=None, errorCode=None, requestId=None,):
    self.message = message
    self.errorCode = errorCode
    self.requestId = requestId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.errorCode = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.requestId = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryFailureException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.errorCode is not None:
      oprot.writeFieldBegin('errorCode', TType.I32, 2)
      oprot.writeI32(self.errorCode)
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 3)
      oprot.writeString(self.requestId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    value = (value * 31) ^ hash(self.errorCode)
    value = (value * 31) ^ hash(self.requestId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuntimeInfo:
  """
  Attributes:
   - totalThreadCnt
   - idleThreadCnt
   - workerCount
   - pendingTaskCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'totalThreadCnt', None, None, ), # 1
    (2, TType.I64, 'idleThreadCnt', None, None, ), # 2
    (3, TType.I64, 'workerCount', None, None, ), # 3
    (4, TType.I64, 'pendingTaskCount', None, None, ), # 4
  )

  def __init__(self, totalThreadCnt=None, idleThreadCnt=None, workerCount=None, pendingTaskCount=None,):
    self.totalThreadCnt = totalThreadCnt
    self.idleThreadCnt = idleThreadCnt
    self.workerCount = workerCount
    self.pendingTaskCount = pendingTaskCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.totalThreadCnt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.idleThreadCnt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.workerCount = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.pendingTaskCount = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuntimeInfo')
    if self.totalThreadCnt is not None:
      oprot.writeFieldBegin('totalThreadCnt', TType.I64, 1)
      oprot.writeI64(self.totalThreadCnt)
      oprot.writeFieldEnd()
    if self.idleThreadCnt is not None:
      oprot.writeFieldBegin('idleThreadCnt', TType.I64, 2)
      oprot.writeI64(self.idleThreadCnt)
      oprot.writeFieldEnd()
    if self.workerCount is not None:
      oprot.writeFieldBegin('workerCount', TType.I64, 3)
      oprot.writeI64(self.workerCount)
      oprot.writeFieldEnd()
    if self.pendingTaskCount is not None:
      oprot.writeFieldBegin('pendingTaskCount', TType.I64, 4)
      oprot.writeI64(self.pendingTaskCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.totalThreadCnt is None:
      raise TProtocol.TProtocolException(message='Required field totalThreadCnt is unset!')
    if self.idleThreadCnt is None:
      raise TProtocol.TProtocolException(message='Required field idleThreadCnt is unset!')
    if self.workerCount is None:
      raise TProtocol.TProtocolException(message='Required field workerCount is unset!')
    if self.pendingTaskCount is None:
      raise TProtocol.TProtocolException(message='Required field pendingTaskCount is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.totalThreadCnt)
    value = (value * 31) ^ hash(self.idleThreadCnt)
    value = (value * 31) ^ hash(self.workerCount)
    value = (value * 31) ^ hash(self.pendingTaskCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
